package com.tds.asset

import com.tdsops.tm.enums.domain.AssetCommentCategory
import com.tdsops.tm.enums.domain.AssetCommentStatus
import com.tdsops.tm.enums.domain.TimeConstraintType
import com.tdsops.tm.enums.domain.TimeScale
import com.tdssrc.grails.TimeUtil
import net.transitionmanager.domain.MoveEvent
import net.transitionmanager.domain.Person
import net.transitionmanager.domain.Project
import net.transitionmanager.domain.TaskBatch
import net.transitionmanager.domain.WorkflowTransition
import org.apache.commons.lang.StringUtils

import static com.tdsops.tm.enums.domain.AssetCommentCategory.GENERAL
import static com.tdsops.tm.enums.domain.AssetCommentStatus.COMPLETED
import static com.tdsops.tm.enums.domain.AssetCommentStatus.HOLD
import static com.tdsops.tm.enums.domain.AssetCommentStatus.PENDING
import static com.tdsops.tm.enums.domain.AssetCommentStatus.READY
import static com.tdsops.tm.enums.domain.AssetCommentStatus.STARTED
import static com.tdsops.tm.enums.domain.TimeScale.M

class AssetComment {

	String comment                  // This is also the title of an issue or task
	String commentType
	Integer mustVerify = 0          // Flag used in MoveTech to have the user verify an instruction

	// These three properties all relating the project
	AssetEntity assetEntity
	Project project
	MoveEvent moveEvent

	Date dateCreated
	Date lastUpdated
	Date statusUpdated              // Updated when the status changes so we can compute the elapsed time that a task is in a status

	Integer isResolved = 0
	Date dateResolved
	String resolution
	Person resolvedBy
	Person createdBy
	Person assignedTo               // FKA owner
	Integer hardAssigned = 0        // Flags a task that can ONLY be done by an individual TODO : constraint 1/0 default 0 type tinyint
	String commentCode
	String category = GENERAL
	String displayOption = 'U'      // Used in dashboard to control display of user entered test (comment) or a generic message
	String attribute = 'default'    // TODO : What is attribute used for?  See if we're using and remove if not
	String commentKey               // TODO : What is commentKey used for?  See if we're using and remove if not

	String status
	Date dueDate

	Integer duration = 0            // # of minutes/hours/days/weeks to perform task
	TimeScale durationScale = M     // Scale that duration represents m)inute, h)our, d)ay, w)eek
	Integer priority = 3            // An additional option to score the order that like tasks should be processed where 1=highest and 5=lowest

	Date estStart
	Date estFinish
	Date actStart
	Date constraintTime               // For tasks that have a constraint on the time that it can start or finish (typically used for start event or start testing)
	TimeConstraintType constraintType // The type of constraint for time (e.g. MSO-Must Start On, )
	// Date actFinish		// Alias of dateResolved

	Integer slack                     // Indicated the original or recalculated slack time that this task has based on other predecessors of successors of this task
	WorkflowTransition workflowTransition   // The transition that this task was cloned from
	Integer workflowOverride = 0      // Flag that the Transition values (duration) has been overridden
	String role                       // The team that will perform the task
	Integer taskNumber                // TODO : constraint type short int min 1, max ?, nullable
	Integer score                     // Derived property that calculates the weighted score for sorting on priority

	TaskBatch taskBatch               // The batch from which the task was generated
	Boolean sendNotification = false  // Whether or not a task will send email notifications
	Boolean isPublished = true        // Whether or not the task is visible to the average user
	Boolean autoGenerated = false     // Whether or not the task is auto generated by the system -  TODO : this will go away with the new Catalog functionality
	Integer recipe                    // The recipe id # that caused this task to be created - TODO : this will be replaced by the taskBatch property with Catalog functionality
	Integer taskSpec                  // The taskSpec id # within the recipe that caused this task to be created
	String instructionsLink
	Boolean durationLocked = false

	static hasMany = [notes: CommentNote, taskDependencies: TaskDependency]

	// The belongsTo would delete both Tasks and Comments when deleting Assets with the delete method. However
	// when deleting an asset, asset references in Tasks should be nulled and Asset Comments should deleted. This is
	// handled in the AssetEntityService.deleteAsset appropriately. See TM-6847
	// static belongsTo = [assetEntity:AssetEntity]

	// TODO : Add custom validator for role that checks that the role is legit for "Staff : *" of RoleType

	// Grouping of the various categories
	static final List<String> preMoveCategories = AssetCommentCategory.preMoveCategories
	static final List<String> moveDayCategories = AssetCommentCategory.moveDayCategories
	static final List<String> postMoveCategories = AssetCommentCategory.postMoveCategories
	static final List<String> discoveryCategories = AssetCommentCategory.discoveryCategories
	static final List<String> planningCategories = AssetCommentCategory.planningCategories
	static final String AUTOMATIC_ROLE = 'AUTO'

	/* Transient properties for Task Generation. */
	Boolean tmpIsFunnellingTask
	Map tmpDefSucc
	Map tmpDefPred
	Boolean tmpHasSuccessorTaskFlag
	def tmpChainPeerTask
	List tmpAssociatedAssets
	Boolean isImported = false
	/* End transient properties for Task Generation.*/

	static constraints = {
		actStart nullable: true
		assetEntity nullable: true
		assignedTo nullable: true
		attribute nullable: true
		autoGenerated nullable: true               // Note - can't have nullable:true and min:1, the category+taskNumber should be unique
		category blank: false, size: 0..64, inList: AssetCommentCategory.list
		comment size: 0..65535
		commentCode nullable: true
		commentKey nullable: true
		commentType blank: false, size: 0..11, inList: ['issue', 'instruction', 'comment']
		constraintTime nullable: true
		constraintType nullable: true, size: 0..4
		createdBy nullable: true
		dateCreated nullable: true
		dateResolved nullable: true
		displayOption blank: false, size: 0..1, inList: ['G', 'U']  // Generic or User
		dueDate nullable: true
		durationScale size: 0..1, inList: TimeScale.keys     // TODO: change duration to default to zero and min:1, need to coordinate with db update for existing data
		estFinish nullable: true
		estStart nullable: true
		hardAssigned nullable: true
		instructionsLink nullable: true
		isResolved nullable: true
		lastUpdated nullable: true
		moveEvent nullable: true
		mustVerify nullable: true
		priority nullable: true     /*,  range:1..5*/  // TODO : add constraint to priority
		recipe nullable: true
		resolution nullable: true
		resolvedBy nullable: true
		role nullable: true
		sendNotification nullable: true
		slack nullable: true
		status nullable: true, size: 0..9, inList: AssetCommentStatus.list // TODO: remove the blank/nullable constraint for status after testing
		statusUpdated nullable: true
		taskBatch nullable: true
		taskNumber nullable: true
		taskSpec nullable: true
		workflowOverride nullable: true            // TODO : add range to workflowOverride constraint
		workflowTransition nullable: true
	}

	static mapping = {
		autoTimestamp false
		createdBy column: 'created_by'
		id column: 'asset_comment_id'
		resolvedBy column: 'resolved_by'
		columns {
			comment sqltype: 'text'
			displayOption sqltype: 'char', length: 1
			duration sqltype: 'mediumint'
			durationScale sqltype: 'char', length: 1
			isResolved sqltype: 'tinyint'
			mustVerify sqltype: 'tinyint'
			priority sqltype: 'tinyint'
			resolution sqltype: 'text'
			taskNumber sqltype: 'shortint unsigned'
			workflowOverride sqltype: 'tinyint'
		}
		/*
			NOTE THAT THIS LOGIC IS DUPLICATED IN THE TaskService.getUserTasks method SO IT NEEDS TO BE MAINTAINED TOGETHER

			The objectives are sort the list descending in this order:
				- HOLD 900
					+ last updated factor ASC
				- DONE recently (60 seconds), to allow undo 800
					+ actual finish factor DESC
				- STARTED tasks     700
					- Hard assigned to user	+55
					- by the user	+50
					- + Est Start Factor to sort ASC
				- READY tasks		600
					- Hard assigned to user	+55
					- Assigned to user		+50
					- + Est Start factor to sort ASC
				- PENDING tasks		500
					- + Est Start factor to sort ASC
				- DONE tasks		200
					- Assigned to User	+50
					- + actual finish factor DESC
					- DONE by others	+0 + actual finish factor DESC
				- All other statuses ?
				- Task # DESC (handled outside the score)

			The inverse of Priority will be added to any score * 5 so that Priority tasks bubble up above hard assigned to user

			DON'T THINK THIS APPLIES ANY MORE - Category of Startup, Physical, Moveday, or Shutdown +10
			- If duedate exists and is older than today +5
			- Priority - Six (6) - <priority value> (so a priority of 5 will add 1 to the score and 1 adds 5)
		*/
		// TODO : JPM 11/2015 : TM-4249 Eliminate Timezone computation 'CONVERT_TZ(SUBTIME(NOW(),'00:01:00.0')....' below
		score formula: "CASE status \
			WHEN '$HOLD' THEN 900 \
			WHEN '$COMPLETED' THEN IF(status_updated >= SUBTIME(NOW(),'00:01:00.0'), 800, 200) + status_updated/NOW() \
			WHEN '$STARTED' THEN 700 + 1 - IFNULL(est_start,NOW())/NOW() \
			WHEN '$READY' THEN 600 + 1 - IFNULL(est_start,NOW())/NOW() \
			WHEN '$PENDING' THEN 500 + 1 - IFNULL(est_start,NOW())/NOW() \
			ELSE 0 END + \
			IF(role='$AUTOMATIC_ROLE',-100,0) + \
			(6 - priority) * 5"
	}

	static transients = ['actFinish', 'assetName', 'assignedToString', 'done', 'isImported', 'runbookTask',
	                     'tmpAssociatedAssets', 'tmpDefPred', 'tmpDefSucc', 'tmpHasSuccessorTaskFlag',
	                     'tmpIsFunnellingTask', 'isActionable']

	// TODO : need method to handle inserting new assetComment or updating so that the category+taskNumber is unique

	String getAssignedToString() {
		assignedTo?.toString()
	}

	String getAssetName() {
		assetEntity?.assetName
	}

	// The actFinish value is stored in the dateResolved column	so need setter/getter
	Date getActFinish() {
		dateResolved
	}

	void setActFinish(Date date) {
		setDateResolved(date)
	}

	boolean isDone() {
		status == COMPLETED
	}

	boolean isRunbookTask() {
		moveDayCategories.contains(category)
	}

	void setDateResolved(Date date) {
		dateResolved = date
		isResolved = date ? 1 : 0
	}

	/*
	 * Returns the remaining duration until the tasks will be completed. This tasks into account the start time
	 * if the task is in progress otherwise returns the total duration
	 * @return duration in minutes
	 */
	Integer durationRemaining() {
		// TODO : implement durationRemaining
		duration
	}

	Integer durationInMinutes() {
		durationScale?.toMinutes(duration)
	}

	def beforeInsert = {
		if (!isImported) {
			dateCreated = TimeUtil.nowGMT()
			lastUpdated = dateCreated
		}
	}

	def beforeUpdate = {
		lastUpdated = TimeUtil.nowGMT()
	}

	String toString() {
		(taskNumber ? taskNumber.toString() + ':' : '') + StringUtils.left(comment, 25)
	}

   /**
    * isActionable - return indicator that the status of the task is Actionable
    */
	boolean isActionable() {
		!(status in [ AssetCommentStatus.COMPLETED, AssetCommentStatus.TERMINATED ])
	}

	// task Manager column header names and its labels
	static final Map<String, List<String>> taskCustomizeFieldAndLabel = [
		actStart: 'Actual Start', assignedTo: 'Assigned To', category: 'Category', commentType: 'Comment Type',
		createdBy: 'Created By', dateCreated: 'Date Created', dateResolved: 'Date Resolved', displayOption: 'Display Option',
		duration: 'Duration', durationScale: 'Duration Scale', estStart: 'Estimated Start', estFinish: 'Estimated Finish', actFinish: 'Actual Finish',
		hardAssigned: 'Hard Assignment', isPublished: 'Is Published', lastUpdated: 'Last Updated', sendNotification: 'Send Notification',
		isResolved: 'Is Resolved', priority: 'Priority', resolution: 'Resolution', resolvedBy: 'Resolved By', role: 'Team',
		statusUpdated: 'Status Updated', assetName: 'Asset Name', assetType: 'Asset Type', event: 'Move Event',
		instructionsLink: 'Instructions Link', taskSpec: 'TaskSpec ID', bundle: 'Move Bundle'
	].asImmutable()
}
