package net.transitionmanager.domain

import com.tds.asset.Application
import com.tdsops.tm.enums.domain.ContextType
import com.tdssrc.grails.TimeUtil

/**
 * Represents a batch that is created when a recipe is executed and tasks are generated. This will provide
 * a way of tracking, updating and possibly deleting tasks that were generate in the cookbook.
 *
 * @author John Martin
 */
class TaskBatch {

	ContextType contextType
	Integer contextId
	String status

	RecipeVersion recipeVersionUsed       // the recipeVersion used to generate the batch of tasks
	Recipe recipe
	Integer taskCount = 0                 // number of tasks generated by the process
	Integer exceptionCount = 0            // number of exceptions that occurred during the recipe generation
	Boolean isPublished = false           // whether the tasks generated where published to users
	String exceptionLog = ''              // the exceptions that were created by the generation of the batch
	String infoLog = ''                   // the debug log/info that were created by the generation of the batch
	Person createdBy                      // Whom created this version of the recipe
	Project project

	Date dateCreated
	Date lastUpdated

	static constraints = {
		dateCreated nullable: true
		lastUpdated nullable: true
		recipe nullable: true
		recipeVersionUsed nullable: true   // Note that recipes can be deleted which will null out any references
		status blank: false, inList: ['Pending', 'Generating', 'Completed', 'Failed', 'Cancelled']
	}

	static mapping = {
		version false
		autoTimestamp false
		id column: 'task_batch_id'
		columns {
			exceptionLog sqltype: 'text'
			infoLog sqltype: 'text'
			taskCount sqltype: 'smallint'
		}
	}

	def beforeInsert = {
		lastUpdated = dateCreated = TimeUtil.nowGMT()
	}
	def beforeUpdate = {
		lastUpdated = TimeUtil.nowGMT()
	}

	def beforeDelete = {
		// Remove any tasks that were created by the batch
		// 160315 OLB: the dependencies of AssetComment are deleted using fk cascade strategy
		// TODO: We should test and check all the dependencies created to be sure that everything is removed
		executeUpdate('delete AssetComment where taskBatch=?', [this])
	}

	/**
	 * Get the name of the object for which the context references
	 */
	String contextName() {
		switch (contextType) {
			case ContextType.A: return Application.get(contextId)?.assetName ?: ''
			case ContextType.B: return MoveBundle.get(contextId)?.name ?: ''
			case ContextType.E: return MoveEvent.get(contextId)?.name ?: ''
			default:            return ''
		}
	}

	/**
	 * Returns informational representation of the task formated as Context + Context Object + batch (# tasks)
	 * (e.g. Application VSphere 5.0 Cluster - batch (30 tasks) )
	 */
	String toString() {
		(recipe ? recipe.context + ' ' : '') + contextName() + ' - batch of ' + taskCount + ' tasks'
	}
}
