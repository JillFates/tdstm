/**
 * tdstm-config.groovy.default
 *
 * This is an optional configuration file that is used to override settings in the grails-app/conf/*.groovy files. To use this,
 * copy this file to a configuration directory  renaming it appropriately (e.g. /etc/tdstm-config.groovy) and then provide a
 * JVM -D argument in the start up of the application as shown:
 *
 *	grails -Dtdstm.config.location=/etc/tdstm-config.groovy run-app
 *	java -Dtdstm.config.location=/etc/tdstm-config.groovy ...
 *
 */

// Grails makes several variables available when processing BuildConfig.groovy, Config.groovy and any external
// files and of those, appName is used here. The variables are set in the main config's Binding, but when parsing
// external files the binding used for that file is the entire config to make previously set values available.
// But because of visibility differences between binding variables and config properties, the Config.groovy binding
// vars are not visible here, only config values. Config.groovy has been modified to make copies its binding vars
// into the config to make them available here, but since those are locally only binding vars, the log4j closure(s)
// cannot access the values. So an additional step is needed, and a local variable is set from the config and then
// any closure defined here has access to that. If more variables are needed in the same way, the only change needed
// is to define another local variabla as is done below for appName no changes are required in Config.groovy.

String appName = this.appName ?: null

// Set the DEFAULT URL to use for the site
grails.serverURL = "https://tmlocal.tdsops.com/tdstm"

// Restart application command
tdstm.admin.serviceRestartCommand = "service tomcat_tranman01 restart"

tdstm {
  license.request_email = "*** EMAIL ADDRESS ***"

	admin {
		// The command to be executed to restart the application
		serviceRestartCommand='service tomcat_tranman01 restart'
	}

  qztray{
	  //relative to the WEB-INF, if it can't be found there, fallback to the Application's Home directory
    keypath = 'tdstm/qztray.transitionmanager.net.key'
    passphrase = '3#AKk3XHTc'
  }


	security {

		// Audit configuration, valid options are: access and activity (default is access)
		// access: logging will include login, logout and security violations
		// activity:  will also include all user interactions with the application.
		auditLogging = "activity"

		// Label to for the authority input prompt
		authorityLabel = "Domain"

		// Control how login form prompts for an authority, options:
		//    select: select list
		//    prompt: input field
		//    hidden: references a defined domain
		//    na: not applicable for when LDAP is not enabled
		authorityPrompt = 'na'

		// The domain key that should be used when authorityPrompt=='hidden'
		authorityName = 'CORP'

		// usernamePlaceholder - used to override the placeholder value in the username field
		usernamePlaceholder = 'Enter your username'

		// Then number of days after which a user account will be automatically locked out
		// indefinitely upon logging in. Set to zero (0) to disable this feature.
		inactiveDaysLockout = 60

		// A list of usernames that should be excluded from the Inactivity Lockout behavior.
		inactivityWhitelist = [ 'tdsadmin' ]

		ldap {
			// Enables the LDAP authentication when true, options true|false
			enabled = false

			// Enables debugging in the LDAP/ActiveDirectory process when true, options true|false
			debug = true

			// A list of one or more domains that the client has
			domains {

				CORP {

					// The type of authority, options ActiveDirectory|LDAP
					type = 'ActiveDirectory'

					// One or more URLs to perform searchs against, if first fails it will try the second
					url = ['ldap://127.0.0.1:389']

					// The credentials for the service account which can be in the format:
					// 		DOMAIN\\username
					//		UPN (e.g. ldap_service@example.com)
					//		DN (e.g. CN=LDAP Service,OU=Accounts,DC=example,DC=com)
					serviceName = 'ldap_service@example.com'
					servicePassword = 'Try2Gue$$1T'

					// The domain used with SAM login if not prompted and not entered by the user
					domain = 'CO_DOMAIN'

					// The FQDN used to construct the username for UPN
					fqdn = 'example.com'

					// The format that usernames are for prompting and persisting in TM, options are username|UPN
					// usernameFormat = 'username'
					usernameFormat = 'UPN'

					// Lookup user using User Principle Name (UPN) or SAM Account Name (SAM) (default UPN)
					userSearchOn = 'SAM'

					// A list of one or more groups that are searched for user permissions
					userSearchBase = [ 'ou=Accounts,dc=example,dc=com' ]

					// How to search for user groups, options direct|nested
					// When using 'nested' the query will lookup parent groups but takes longer
					roleSearchMode = 'direct'

					// The base DN to use when attempting to find the group(s) that a user belongs to
					roleBaseDN = 'OU=Accounts,DC=example,DC=com'

					// When true, upon authenticating the user's AD roles that map to TM roles will be assigned to the user and existing roles will
					// be removed if they are no longer exist in AD. Any role not defined in the map is not updated and can be manual added to users.
					// Options true|false (default false)
					updateRoles = true
					roleMap = [
						editor:'CN=Editor,OU=TransitionMananager,OU=Applications',
						supervisor:'CN=Supervisor,OU=TransitionMananager,OU=Applications',
						admin:'CN=Admin,OU=TransitionMananager,OU=Applications',
						client_admin: 'CN=ClientAdmin,OU=TransitionMananager,OU=Applications',
						client_mgr: 'CN=ClientMgr,OU=TransitionMananager,OU=Applications'
					]

					// The default group to assign users when updateRoles=true. When set to blank, it requires that the individuals be assigned to
					// security group(s). Use will receive this role along with any that are mapped.
					defaultRole = ''

					// When true and the user does not previously exists in TM, it will create the user's account if they have a role or there is a default
					autoProvision = true

					// The company to associate users to when they are provisioned initially
					company = 2444

					// The project to assign the user to and make their default when first provisioned
					defaultProject = 2445

					// The default timezone to set for the user when first provisioned
					defaultTimezone = 'GMT'

					// When true the system will refresh the user's personal information each time that the authenticate successfully
					updateUserInfo = true
				}

				// Define a 2nd domain / authority
				QA {
					type = 'LDAP'
					url = 'ldap://127.0.0.1:389'
					usernameFormat = 'email'
					userSearchBase = 'dc=com'
					serviceName = 'qa_service_account@example.com'
					servicePassword = 'Try2Gu3$$Th1s1T00'
					roleBaseDN = 'dc=example,dc=com'
					company = 2444
					defaultProject = 2445
					roleSearchMode = 'nested'
				}
			}
		}

		localUser {

			// Flag if the local user accounts are supported, values true|false (default true)
			enabled = true

			// Minimum number of characters the password must be (default 8)
			minPasswordLength = 8

			// Number of times user can fail login before the account is locked out, set to zero (0) prevents lockout, default 5
			maxLoginFailureAttempts = 5

			// How long to disable an account that failed logins to many times, set to zero (0) will lockout the account in definitely, default 30 minutes
			failedLoginLockoutPeriodMinutes = 30

			// As a fail-safe, locked out accounts could be cleared when the application is restarted in the event of a DOS style attack (default true)
			clearLockoutsOnRestart = true

			// How long to retain password history to prevent re-use, set to zero (0) disables password history (default 2 years). This is mutually exclusive with passwordHistoryRetentionCount.
			passwordHistoryRetentionDays = 365 * 2

			// How many previous passwords to retain to prevent the user from reusing. This is mutually exclusive with passwordHistoryRetentionDays =
			passwordHistoryRetentionCount = 0

			// The maximum number of days a password can be used before the user must change it, set to zero (0) disable the feature (default 0 days)
			maxPasswordAgeDays = 90

			// forgot my password reset time limit (minutes)
			forgotMyPasswordResetTimeLimit = 60

			// Account Activation Email time limit (minutes)
			accountActivationTimeLimit = 60*24*3

			// forgot my password retain history days
			forgotMyPasswordRetainHistoryDays = 30

			// prevent the user from changing their password (hours)
			minPeriodToChangePswd = 24

			// Disable the forcing of users from changing their passwords if the hash method used was the obsolete one.
			forceUseNewEncryption = true
		}
	}
}

// Database Properties
environments {
	development {
		dataSource {
			// TDS Transitional Manager
			//	url = "jdbc:mysql://dev02.tdsops.net/tdstm"
			url = "jdbc:mysql://localhost/tdstm?autoReconnect=true"
			username = "tdstm"
			password = "tdstm"
			//dbCreate = "create"
			//logSql = true
		}
	}

	production {
		dataSource {
			// TDS Transitional Manager
			//	url = "jdbc:mysql://dev02.tdsops.net/tdstm"
			url = "jdbc:mysql://dev02.tdsops.net/tdstm?autoReconnect=true"
			username = ""
			password = ""

			properties {
				defaultTransactionIsolation = java.sql.Connection.TRANSACTION_READ_COMMITTED
				initialSize=5
				jdbcInterceptors = 'ConnectionState'
				jmxEnabled = true
				maxActive=100
				maxAge = 10 * 60000
				maxIdle=5
				maxWait = 10000
				minEvictableIdleTimeMillis=(1000*60*30)
				minIdle = 5
				removeAbandoned=true
				removeAbandonedTimeout=(60*5) // Should be set to the longest running query (default 60 seconds)
				testOnBorrow=true
				testOnReturn=true
				testWhileIdle=true
				timeBetweenEvictionRunsMillis=(1000*60*30)
				validationInterval = 15000
				validationQuery='/* ping */'
				validationQueryTimeout = 3
			}
		}
	}

	// DB Configuation to be used with the LiquiBase tool but not fully implemented yet
	dbdiff {
		dataSource {
			url = "jdbc:mysql://localhost/dbdiff?autoReconnect=true"
			username = "tdstm"
			password = "tdstm"
			dbCreate = "create-drop"
		}
	}
}

// Graph Properties
graph {
	graphviz {
		dotCmd = '/usr/local/bin/dot'
		graphType = 'svg'
	}
	deleteDotFile = false
	tmpDir = '/data/tmp/'
	targetDir = '/private/var/www/tdstm/images/tmp/'
	targetURI = '/../images/tmp/'
}

/**
 * Email Configuration Settings
 */
grails {

	/*
	 * SMTP connection using typical no authenticated/secure communications
	 */
	mail {
		host = '127.0.0.1'
		port = 25
		username = ''
		password = ''
		props = [
			'mail.transport.protocol': 'smtp'
			,'mail.debug': false
			,'mail.debug.auth': false
			,'mail.smtp.auth': false
			,'mail.smtp.port': 25
			,'mail.smtp.starttls.enable': false
			,'mail.smtp.ssl.enable': false
			,'mail.smtp.socketFactory.fallback': true
		]
	}

	/*
	 * SMTP connection using SSL connection
	 *
	mail {
		host = 'smtp.gmail.com'
		port = 465
		username = '*** USERNAME ***'
		password = '*** PASSWORD ***'
		props = [
			'mail.smtp.auth': true,
			'mail.smtp.socketFactory.port': 465,
			'mail.smtp.socketFactory.class':'javax.net.ssl.SSLSocketFactory',
			'mail.smtp.starttls.enable': false,
			'mail.smtp.ssl.enable': true,
			'mail.smtp.socketFactory.fallback': false
		]
	}
	*/

	/*
	 * SMTP connection using TLS connection
	 *
	mail {
		host = '*** HOSTNAME ***'
		port = 587
		username = '*** USERNAME ***'
		password = '*** PASSWORD ***'
		props = [
			'mail.smtp.auth': true,
			'mail.smtp.socketFactory.port':'587',
			'mail.smtp.starttls.enable': true,
			'mail.smtp.socketFactory.class': 'javax.net.ssl.SSLSocketFactory',
			'mail.smtp.socketFactory.fallback': false,
			'mail.debug':true
		]
	}
	*/
}
// Toggle email on/off completely
grails.mail.disabled=false

// The email address that messages appear to come from if not specified in code
grails.mail.default.from = "*** EMAIL ADDRESS ***"

// Used to override the TO for messages - used for debugging to send all email to test account
grails.mail.overrideAddress="*** EMAIL ADDRESS IF OVERRIDING ***"

/**
 * Logging configuration
 */
// TODO log4j
logback = {

	if (!appName) {
		// the config is parsed multiple times, some properly initialized and
		// some not, so exit early if not configured and wait until next time
		return
	}

	appenders {
		//def commonPattern = "%d{[EEE, dd-MMM-yyyy @ HH:mm:ss.SSS]} [%t] %-5p %c %x - %m%n"
		//def auditPattern = "%d{[EEE, dd-MMM-yyyy @ HH:mm:ss.SSS]} - %m%n"
		def commonPattern = "%d{[dd-MMM-yyyy HH:mm:ss.SSS]} %-5level %logger{5} - %msg%n"
		def auditPattern = "%d{[dd-MMM-yyyy hh:mm:ss.SSS]} %msg%n"
		def logDirectory = 'target'
		if (System.getProperty('catalina.base')) {
			logDirectory = System.getProperty('catalina.base') + '/logs'
		}

		// Use this if we want to modify the default appender called 'stdout'.
		console name: 'stdout',
			// threshold: org.apache.log4j.Level.FATAL,
			//encoder: pattern(pattern: '[%t] %-5p %c{2} %x - %m%n')
			encoder: pattern(pattern: '%-5level %logger{5} - %msg%n')

		// Application log file
		rollingFile name: 'applicationLog',
			file: logDirectory + '/' + appName + '.log',
			triggeringPolicy: new SizeBasedTriggeringPolicy(maxFileSize: "100MB"),
			rollingPolicy: new FixedWindowRollingPolicy(fileNamePattern: logDirectory + '/' + appName + '.%i.log.gz', maxIndex: 7),
			encoder: pattern(pattern: commonPattern)

		// Audit log file
		rollingFile name: 'auditLog',
			file: logDirectory + '/' + appName + '-audit.log',
			rollingPolicy: new TimeBasedRollingPolicy(
				fileNamePattern: logDirectory + '/' + appName + '-audit-%d{yyyy-MM-dd}.%i.log',
				maxHistory: 30,
				timeBasedFileNamingAndTriggeringPolicy: new SizeAndTimeBasedFNATP(maxFileSize: "100MB")
			),
			encoder:pattern(pattern: auditPattern)

		// Stacktrace log file
		// Use the 'null' line only, if we want to prevent creation of a stacktrace.log file.
		// 'null' name: 'stacktrace'
		rollingFile name: 'stacktraceLog',
			file: logDirectory + '/' + appName + '-stacktrace.log',
			triggeringPolicy: new SizeBasedTriggeringPolicy(maxFileSize: "100MB"),
			rollingPolicy: new FixedWindowRollingPolicy(fileNamePattern: logDirectory + '/' + appName + '-stacktrace.%i.log.gz', maxIndex: 7),
			encoder: pattern(pattern: commonPattern)
	}

	def debugPackages = ['grails.app']
	def auditClass = 'net.transitionmanager.service.AuditService'

	info 'org.codehaus.groovy.grails',
	     'org.grails',
	     'grails.app.services.org.grails.plugin.resource',
	     'grails.app.taglib.org.grails.plugin.resource',
	     'grails.app.resourceMappers.org.grails.plugin.resource',
	     'grails.app.conf',
	     'org.springframework',
	     'org.hibernate',
	     'net.sf.ehcache.hibernate'

	root {
		info 'stdout', 'applicationLog'
		additivity: true
	}

	// Send debug logging to consle
	debug applicationLog: 'grails.app', additivity: true

	// Setup Audit Logging messages to go to their own log file in addition to the application log
	info  auditLog: 'net.transitionmanager.service.AuditService', additivity: true
}
