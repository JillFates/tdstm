// automatically generated by the FlatBuffers compiler, do not modify

package net.transitionmanager.fbs;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;
import groovy.transform.CompileStatic;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
/**
 * <p>This part of the model represents the following JSON part in the ETLProcessorResult structure:</p>
 * <pre>
 *  "find": {
 *     "matchOn": null,
 *     "query": [...],
 *     "results": [...],
 *     "size": 0
 *  },
 * </pre>
 * <p>Example of an instance creation:</p>
 * <pre>
 * FBSQueryResult.createFBSQueryResult(builder,
 *         builder.createString('Application'),
 *         FBSQueryResult.createCriteriaVector(builder,
 *                 (int[]) [
 *                         FBSQueryResultCriteria.createFBSQueryResultCriteria(builder,
 *                                 builder.createString('propertyName'),
 *                                 builder.createString('eq'),
 *                                 builder.createString('zulu01'),
 *                                 builder.createString('String')
 *                         )
 *                 ]
 *         )
 * )
 * </pre>
 */
@CompileStatic
public final class FBSFindResult extends Table {
    public static FBSFindResult getRootAsFBSFindResult(ByteBuffer _bb) {
        return getRootAsFBSFindResult(_bb, new FBSFindResult());
    }

    public static FBSFindResult getRootAsFBSFindResult(ByteBuffer _bb, FBSFindResult obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public void __init(int _i, ByteBuffer _bb) {
        bb_pos = _i;
        bb = _bb;
        vtable_start = bb_pos - bb.getInt(bb_pos);
        vtable_size = bb.getShort(vtable_start);
    }

    public FBSFindResult __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public FBSQueryResult query(int j) {
        return query(new FBSQueryResult(), j);
    }

    public FBSQueryResult query(FBSQueryResult obj, int j) {
        int o = __offset(4);
        return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null;
    }

    public int queryLength() {
        int o = __offset(4);
        return o != 0 ? __vector_len(o) : 0;
    }

    public long results(int j) {
        int o = __offset(6);
        return o != 0 ? bb.getLong(__vector(o) + j * 8) : 0;
    }

    public int resultsLength() {
        int o = __offset(6);
        return o != 0 ? __vector_len(o) : 0;
    }

    public ByteBuffer resultsAsByteBuffer() {
        return __vector_as_bytebuffer(6, 8);
    }

    public ByteBuffer resultsInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 6, 8);
    }

    public int size() {
        int o = __offset(8);
        return o != 0 ? bb.getInt(o + bb_pos) : 0;
    }

    public int matchOn() {
        int o = __offset(10);
        return o != 0 ? bb.getInt(o + bb_pos) : 0;
    }

    public static int createFBSFindResult(FlatBufferBuilder builder,
                                          int queryOffset,
                                          int resultsOffset,
                                          int size,
                                          int matchOn) {
        builder.startObject(4);
        FBSFindResult.addMatchOn(builder, matchOn);
        FBSFindResult.addSize(builder, size);
        FBSFindResult.addResults(builder, resultsOffset);
        FBSFindResult.addQuery(builder, queryOffset);
        return FBSFindResult.endFBSFindResult(builder);
    }

    public static void startFBSFindResult(FlatBufferBuilder builder) {
        builder.startObject(4);
    }

    public static void addQuery(FlatBufferBuilder builder, int queryOffset) {
        builder.addOffset(0, queryOffset, 0);
    }

    public static int createQueryVector(FlatBufferBuilder builder, int[] data) {
        builder.startVector(4, data.length, 4);
        for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]);
        return builder.endVector();
    }

    public static void startQueryVector(FlatBufferBuilder builder, int numElems) {
        builder.startVector(4, numElems, 4);
    }

    public static void addResults(FlatBufferBuilder builder, int resultsOffset) {
        builder.addOffset(1, resultsOffset, 0);
    }

    public static int createResultsVector(FlatBufferBuilder builder, long[] data) {
        builder.startVector(8, data.length, 8);
        for (int i = data.length - 1; i >= 0; i--) builder.addLong(data[i]);
        return builder.endVector();
    }

    public static void startResultsVector(FlatBufferBuilder builder, int numElems) {
        builder.startVector(8, numElems, 8);
    }

    public static void addSize(FlatBufferBuilder builder, int size) {
        builder.addInt(2, size, 0);
    }

    public static void addMatchOn(FlatBufferBuilder builder, int matchOn) {
        builder.addInt(3, matchOn, 0);
    }

    public static int endFBSFindResult(FlatBufferBuilder builder) {
        int o = builder.endObject();
        return o;
    }
}

