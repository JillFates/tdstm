// automatically generated by the FlatBuffers compiler, do not modify

package net.transitionmanager.fbs;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
/**
 * <p>Base class definition for a serialized ETLProcessorResult instance.</p>
 * <p>It contains a similar structure to {@code ETLProcessorResult}.</p>
 * <p>It is used after an ETL process execution.</p>
 *
 * <p>Use following the example to create a new instance of FBSProcessorResult:</p>
 * <pre>
 *
 * FlatBufferBuilder builder = new FlatBufferBuilder(1024)
 *
 * int[] domainsOffset = ...
 *
 * FBSProcessorResult.createFBSProcessorResult(
 *     builder,
 *     FBSInfo.createFBSInfo(builder, builder.createString(etlProcessorResultInstance.ETLInfo.filename)),
 *     builder.createString(etlProcessorResultInstance.debugConsole.content),
 *     FBSDomainResult.createDataVector(builder, domainsOffset),
 *     etlProcessorResultInstance.version
 * )
 * </pre>
 * @see FBSInfo
 * @see FBSDomainResult#createDataVector
 */
public final class FBSProcessorResult extends Table {
    public static FBSProcessorResult getRootAsFBSProcessorResult(ByteBuffer _bb) {
        return getRootAsFBSProcessorResult(_bb, new FBSProcessorResult());
    }

    public static FBSProcessorResult getRootAsFBSProcessorResult(ByteBuffer _bb, FBSProcessorResult obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public void __init(int _i, ByteBuffer _bb) {
        bb_pos = _i;
        bb = _bb;
        vtable_start = bb_pos - bb.getInt(bb_pos);
        vtable_size = bb.getShort(vtable_start);
    }

    public FBSProcessorResult __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public FBSInfo FBSInfo() {
        return FBSInfo(new FBSInfo());
    }

    public FBSInfo FBSInfo(FBSInfo obj) {
        int o = __offset(4);
        return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null;
    }

    public String consoleLog() {
        int o = __offset(6);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer consoleLogAsByteBuffer() {
        return __vector_as_bytebuffer(6, 1);
    }

    public ByteBuffer consoleLogInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 6, 1);
    }

    public FBSDomainResult domains(int j) {
        return domains(new FBSDomainResult(), j);
    }

    public FBSDomainResult domains(FBSDomainResult obj, int j) {
        int o = __offset(8);
        return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null;
    }

    public int domainsLength() {
        int o = __offset(8);
        return o != 0 ? __vector_len(o) : 0;
    }

    public long version() {
        int o = __offset(10);
        return o != 0 ? bb.getLong(o + bb_pos) : 0L;
    }

    public static int createFBSProcessorResult(FlatBufferBuilder builder,
                                               int FBSInfoOffset,
                                               int consoleLogOffset,
                                               int domainsOffset,
                                               long version) {
        builder.startObject(4);
        FBSProcessorResult.addVersion(builder, version);
        FBSProcessorResult.addDomains(builder, domainsOffset);
        FBSProcessorResult.addConsoleLog(builder, consoleLogOffset);
        FBSProcessorResult.addFBSInfo(builder, FBSInfoOffset);
        return FBSProcessorResult.endFBSProcessorResult(builder);
    }

    public static void startFBSProcessorResult(FlatBufferBuilder builder) {
        builder.startObject(4);
    }

    public static void addFBSInfo(FlatBufferBuilder builder, int FBSInfoOffset) {
        builder.addOffset(0, FBSInfoOffset, 0);
    }

    public static void addConsoleLog(FlatBufferBuilder builder, int consoleLogOffset) {
        builder.addOffset(1, consoleLogOffset, 0);
    }

    public static void addDomains(FlatBufferBuilder builder, int domainsOffset) {
        builder.addOffset(2, domainsOffset, 0);
    }

    public static int createDomainsVector(FlatBufferBuilder builder, int[] data) {
        builder.startVector(4, data.length, 4);
        for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]);
        return builder.endVector();
    }

    public static void startDomainsVector(FlatBufferBuilder builder, int numElems) {
        builder.startVector(4, numElems, 4);
    }

    public static void addVersion(FlatBufferBuilder builder, long version) {
        builder.addLong(3, version, 0L);
    }

    public static int endFBSProcessorResult(FlatBufferBuilder builder) {
        int o = builder.endObject();
        return o;
    }

    public static void finishFBSProcessorResultBuffer(FlatBufferBuilder builder, int offset) {
        builder.finish(offset);
    }

    public static void finishSizePrefixedFBSProcessorResultBuffer(FlatBufferBuilder builder, int offset) {
        builder.finishSizePrefixed(offset);
    }
}

