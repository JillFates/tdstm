// automatically generated by the FlatBuffers compiler, do not modify

package net.transitionmanager.fbs;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class ETLProcessorResult extends Table {
  public static ETLProcessorResult getRootAsETLProcessorResult(ByteBuffer _bb) { return getRootAsETLProcessorResult(_bb, new ETLProcessorResult()); }
  public static ETLProcessorResult getRootAsETLProcessorResult(ByteBuffer _bb, ETLProcessorResult obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public ETLProcessorResult __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public RowResult rows(int j) { return rows(new RowResult(), j); }
  public RowResult rows(RowResult obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int rowsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public long version() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createETLProcessorResult(FlatBufferBuilder builder,
      int rowsOffset,
      long version) {
    builder.startObject(2);
    ETLProcessorResult.addVersion(builder, version);
    ETLProcessorResult.addRows(builder, rowsOffset);
    return ETLProcessorResult.endETLProcessorResult(builder);
  }

  public static void startETLProcessorResult(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addRows(FlatBufferBuilder builder, int rowsOffset) { builder.addOffset(0, rowsOffset, 0); }
  public static int createRowsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRowsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addVersion(FlatBufferBuilder builder, long version) { builder.addLong(1, version, 0L); }
  public static int endETLProcessorResult(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishETLProcessorResultBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedETLProcessorResultBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }
}

