// automatically generated by the FlatBuffers compiler, do not modify

package net.transitionmanager.fbs;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
/**
 * <p>This part of the model represents the following JSON part in the ETLProcessorResult structure:</p>
 * <pre>
 *     "fieldLabelMap": {
 *         "assetName": "Name",
 *         "description": "Description",
 *         "id": "Id"
 *     }
 * </pre>
 * <p>Example of an instance creation:</p>
 * <pre>
 * int fieldsLabelMapOffset = builder.createSortedVectorOfTables(new FBSFieldLabelMap(),
 *      (int[]) [
 *         FBSFieldLabelMap.createFBSFieldLabelMap(builder,
 *             builder.createString('id'),
 *             builder.createString('Id')
 *         ),
 *         FBSFieldLabelMap.createFBSFieldLabelMap(builder,
 *             builder.createString('assetName'),
 *             builder.createString('Name')
 *         )
 *     ]
 * )
 * </pre>
 */
public final class FBSFieldLabelMap extends Table {
    public static FBSFieldLabelMap getRootAsFBSFieldLabelMap(ByteBuffer _bb) {
        return getRootAsFBSFieldLabelMap(_bb, new FBSFieldLabelMap());
    }

    public static FBSFieldLabelMap getRootAsFBSFieldLabelMap(ByteBuffer _bb, FBSFieldLabelMap obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public void __init(int _i, ByteBuffer _bb) {
        bb_pos = _i;
        bb = _bb;
        vtable_start = bb_pos - bb.getInt(bb_pos);
        vtable_size = bb.getShort(vtable_start);
    }

    public FBSFieldLabelMap __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public String name() {
        int o = __offset(4);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer nameAsByteBuffer() {
        return __vector_as_bytebuffer(4, 1);
    }

    public ByteBuffer nameInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 4, 1);
    }

    public String label() {
        int o = __offset(6);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer labelAsByteBuffer() {
        return __vector_as_bytebuffer(6, 1);
    }

    public ByteBuffer labelInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 6, 1);
    }

    public static int createFBSFieldLabelMap(FlatBufferBuilder builder,
                                             int nameOffset,
                                             int labelOffset) {
        builder.startObject(2);
        FBSFieldLabelMap.addLabel(builder, labelOffset);
        FBSFieldLabelMap.addName(builder, nameOffset);
        return FBSFieldLabelMap.endFBSFieldLabelMap(builder);
    }

    public static void startFBSFieldLabelMap(FlatBufferBuilder builder) {
        builder.startObject(2);
    }

    public static void addName(FlatBufferBuilder builder, int nameOffset) {
        builder.addOffset(0, nameOffset, 0);
    }

    public static void addLabel(FlatBufferBuilder builder, int labelOffset) {
        builder.addOffset(1, labelOffset, 0);
    }

    public static int endFBSFieldLabelMap(FlatBufferBuilder builder) {
        int o = builder.endObject();
        builder.required(o, 4);  // name
        return o;
    }

    @Override
    protected int keysCompare(Integer o1, Integer o2, ByteBuffer _bb) {
        return compareStrings(__offset(4, o1, _bb), __offset(4, o2, _bb), _bb);
    }

    public static FBSFieldLabelMap __lookup_by_key(FBSFieldLabelMap obj, int vectorLocation, String key, ByteBuffer bb) {
        byte[] byteKey = key.getBytes(Table.UTF8_CHARSET.get());
        int span = bb.getInt(vectorLocation - 4);
        int start = 0;
        while (span != 0) {
            int middle = span / 2;
            int tableOffset = __indirect(vectorLocation + 4 * (start + middle), bb);
            int comp = compareStrings(__offset(4, bb.capacity() - tableOffset, bb), byteKey, bb);
            if (comp > 0) {
                span = middle;
            } else if (comp < 0) {
                middle++;
                start += middle;
                span -= middle;
            } else {
                return (obj == null ? new FBSFieldLabelMap() : obj).__assign(tableOffset, bb);
            }
        }
        return null;
    }
}

