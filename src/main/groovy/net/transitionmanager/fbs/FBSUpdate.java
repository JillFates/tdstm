// automatically generated by the FlatBuffers compiler, do not modify

package net.transitionmanager.fbs;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
/**
 * <p>This part of the model represents the following JSON part in the ETLProcessorResult structure:</p>
 * <pre>
 *  "update": {
 *     "assetType": "VM"
 *  }
 * </pre>
 * <p>Example of an instance creation:</p>
 * <pre>
 *  FBSUpdate.createFBSUpdate(builder,
 *      builder.createString('assetType'),
 *      builder.createString('VM'),
 *      builder.createString('String')
 *  ),
 * </pre>
 */
public final class FBSUpdate extends Table {
    public static FBSUpdate getRootAsFBSUpdate(ByteBuffer _bb) {
        return getRootAsFBSUpdate(_bb, new FBSUpdate());
    }

    public static FBSUpdate getRootAsFBSUpdate(ByteBuffer _bb, FBSUpdate obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public void __init(int _i, ByteBuffer _bb) {
        bb_pos = _i;
        bb = _bb;
        vtable_start = bb_pos - bb.getInt(bb_pos);
        vtable_size = bb.getShort(vtable_start);
    }

    public FBSUpdate __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public String name() {
        int o = __offset(4);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer nameAsByteBuffer() {
        return __vector_as_bytebuffer(4, 1);
    }

    public ByteBuffer nameInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 4, 1);
    }

    public String value() {
        int o = __offset(6);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer valueAsByteBuffer() {
        return __vector_as_bytebuffer(6, 1);
    }

    public ByteBuffer valueInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 6, 1);
    }

    public String type() {
        int o = __offset(8);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer typeAsByteBuffer() {
        return __vector_as_bytebuffer(8, 1);
    }

    public ByteBuffer typeInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 8, 1);
    }

    public static int createFBSUpdate(FlatBufferBuilder builder,
                                      int nameOffset,
                                      int valueOffset,
                                      int typeOffset) {
        builder.startObject(3);
        FBSUpdate.addType(builder, typeOffset);
        FBSUpdate.addValue(builder, valueOffset);
        FBSUpdate.addName(builder, nameOffset);
        return FBSUpdate.endFBSUpdate(builder);
    }

    public static void startFBSUpdate(FlatBufferBuilder builder) {
        builder.startObject(3);
    }

    public static void addName(FlatBufferBuilder builder, int nameOffset) {
        builder.addOffset(0, nameOffset, 0);
    }

    public static void addValue(FlatBufferBuilder builder, int valueOffset) {
        builder.addOffset(1, valueOffset, 0);
    }

    public static void addType(FlatBufferBuilder builder, int typeOffset) {
        builder.addOffset(2, typeOffset, 0);
    }

    public static int endFBSUpdate(FlatBufferBuilder builder) {
        int o = builder.endObject();
        builder.required(o, 4);  // name
        return o;
    }

    @Override
    protected int keysCompare(Integer o1, Integer o2, ByteBuffer _bb) {
        return compareStrings(__offset(4, o1, _bb), __offset(4, o2, _bb), _bb);
    }

    public static FBSUpdate __lookup_by_key(FBSUpdate obj, int vectorLocation, String key, ByteBuffer bb) {
        byte[] byteKey = key.getBytes(Table.UTF8_CHARSET.get());
        int span = bb.getInt(vectorLocation - 4);
        int start = 0;
        while (span != 0) {
            int middle = span / 2;
            int tableOffset = __indirect(vectorLocation + 4 * (start + middle), bb);
            int comp = compareStrings(__offset(4, bb.capacity() - tableOffset, bb), byteKey, bb);
            if (comp > 0) {
                span = middle;
            } else if (comp < 0) {
                middle++;
                start += middle;
                span -= middle;
            } else {
                return (obj == null ? new FBSUpdate() : obj).__assign(tableOffset, bb);
            }
        }
        return null;
    }
}

