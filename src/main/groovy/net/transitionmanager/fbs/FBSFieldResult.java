// automatically generated by the FlatBuffers compiler, do not modify

package net.transitionmanager.fbs;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FBSFieldResult extends Table {
  public static FBSFieldResult getRootAsFBSFieldResult(ByteBuffer _bb) { return getRootAsFBSFieldResult(_bb, new FBSFieldResult()); }
  public static FBSFieldResult getRootAsFBSFieldResult(ByteBuffer _bb, FBSFieldResult obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public FBSFieldResult __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String key() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer keyAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer keyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String originalValue() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originalValueAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer originalValueInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public String value() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer valueAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer valueInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public String init() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer initAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer initInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  public String type() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }

  public static int createFBSFieldResult(FlatBufferBuilder builder,
      int keyOffset,
      int originalValueOffset,
      int valueOffset,
      int initOffset,
      int typeOffset) {
    builder.startObject(5);
    FBSFieldResult.addType(builder, typeOffset);
    FBSFieldResult.addInit(builder, initOffset);
    FBSFieldResult.addValue(builder, valueOffset);
    FBSFieldResult.addOriginalValue(builder, originalValueOffset);
    FBSFieldResult.addKey(builder, keyOffset);
    return FBSFieldResult.endFBSFieldResult(builder);
  }

  public static void startFBSFieldResult(FlatBufferBuilder builder) { builder.startObject(5); }
  public static void addKey(FlatBufferBuilder builder, int keyOffset) { builder.addOffset(0, keyOffset, 0); }
  public static void addOriginalValue(FlatBufferBuilder builder, int originalValueOffset) { builder.addOffset(1, originalValueOffset, 0); }
  public static void addValue(FlatBufferBuilder builder, int valueOffset) { builder.addOffset(2, valueOffset, 0); }
  public static void addInit(FlatBufferBuilder builder, int initOffset) { builder.addOffset(3, initOffset, 0); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(4, typeOffset, 0); }
  public static int endFBSFieldResult(FlatBufferBuilder builder) {
    int o = builder.endObject();
    builder.required(o, 4);  // key
    return o;
  }

  @Override
  protected int keysCompare(Integer o1, Integer o2, ByteBuffer _bb) { return compareStrings(__offset(4, o1, _bb), __offset(4, o2, _bb), _bb); }

  public static FBSFieldResult __lookup_by_key(FBSFieldResult obj, int vectorLocation, String key, ByteBuffer bb) {
    byte[] byteKey = key.getBytes(Table.UTF8_CHARSET.get());
    int span = bb.getInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = __indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = compareStrings(__offset(4, bb.capacity() - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return (obj == null ? new FBSFieldResult() : obj).__assign(tableOffset, bb);
      }
    }
    return null;
  }
}

