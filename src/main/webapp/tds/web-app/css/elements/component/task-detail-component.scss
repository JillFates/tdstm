@import "../../base/taskstatus-mixins";

.task-detail-component {

  .modal-body {
    height: 80%;

    .full-height {
      padding-left: 24px;
      padding-right: 24px;

      .dates-info-container {
        table {
          width: 100%;
          tr {
            width: 100%;
          }
          .date-created, .last-updated {
            width: 50%;
          }
          .last-updated {
            text-align: right;
          }
        }
      }

      .btn-collapsed-fixed-right {
        position: absolute;
        right: 20px;
      }

      table.task-details {
        width: 100%;
        border-collapse: separate;
        border-spacing: 3px;
        padding: 0;
        .task-number {
          min-width: 104px;
        }
        .task-comment {
          max-width: 400px;
          font-weight:bold;
        }
        td {
          display: table-cell;
          text-align: initial;
          vertical-align: inherit;
          color: inherit;
          font-weight: inherit;
          font-size: 13px;
          border-radius: .25em;
          padding: 4px 6px;
        }
        td.N {
          width: 15%;
          label {
            margin-bottom: unset;
            font-weight: unset;
          }
        }
      }
    }

    .k-grid-toolbar {
      padding-bottom: 0;
    }

  }

  .modal-footer {
    padding-left: 25px;
    padding-right: 25px;
    display: block;
    .options-container {
      display: flex;
      justify-content: space-between;
      .options {
        display: flex;
      }
    }
  }

  tds-button {
    button {
      color: unset;
      border-color: unset;
    }
  }
}

/*
@mixin combo-status {
  margin: 0;
  padding: 0;
  border: 0;
  display: inline-flex;
  outline-style: none;
  max-height: 27px !important;

  span.k-dropdown-wrap {
    background: inherit;
    color: inherit;

    span.k-select {
      border-left: 0;
      background: inherit;
      color: inherit;

      span.k-i-arrow-s {
        margin-left: -35px;
      }
    }
  }
}

.task-detail-component {
  .tds-angular-component-content {
    .successor-predecessor-table {
      max-height: 200px;
      height: 200px;

      tbody tr:hover,
      tbody tr.k-state-hover {
        color: initial;
      }
    }
  }

  .modal-content.task-create-component {
    min-height: 720px;
    min-width: 769px;
  }

  .modal-content {
    min-height: 760px;
    min-width: 769px;

    @-moz-document url-prefix() {
      display: inline-block;
      min-height: 890px;
    }

    .modal-body {
      height: 86%;

      .k-grid-header.k-grid-dynamic-header {
        position: relative;
      }

      form.create-form {
        td.description-container {
          max-width: 100%;

          input {
            width: 100%;
          }
        }
      }

      form {
        .note {
          resize: none;
        }

        .vertical-note-status {
          vertical-align: top;
        }

        .duration-container {
          vertical-align: top;
        }

        tr.dependency-error-section {
          display: none;

          td {
            label {
              visibility: hidden;
            }
          }
        }

        tr.dependency-error-section {
          table {
            width: 100%;
          }
        }

        table.has-duplicated-successors {
          tr.dependency-error-section.has-duplicated {
            display: block;

            td {
              label.has-duplicated-successors {
                visibility: visible;
              }
            }
          }
        }

        table.has-duplicated-predecessors {
          tr.dependency-error-section.has-duplicated {
            display: block;

            td {
              label.has-duplicated-predecessors {
                visibility: visible;
              }
            }
          }
        }

        table.has-duplicated-predecessors,
        table.has-duplicated-successors {
          kendo-grid.successor-predecessor-table {
            max-height: 160px;
          }
        }

        table.has-double-assignment {
          kendo-grid.successor-predecessor-table.has-double-assignment {
            max-height: 110px;
          }
        }

        table.has-double-assignment {
          tr.dependency-error-section.has-double-assignment {
            display: block;

            td {
              label.has-double-assignment {
                visibility: visible;
              }
            }
          }
        }

        kendo-grid.successor-predecessor-table {
          .k-grid-content tr td {
            font-weight: normal;
            padding-top: 0 !important;
            padding-bottom: 0 !important;
          }
        }

        kendo-grid.successor-predecessor-table.dependency-tasks {
          .k-grid-content tr {
            td:nth-child(1),
            td:nth-child(2) {
              padding-left: 12px;
            }
          }
        }

        .error-message,
        .error-missing-field {
          color: $color-message-error--red;
          margin-top: 3px;
        }

        .error-message {
          display: none;
        }

        .validated-field {
          .ng-invalid:not(.ng-pristine) {
            border-color: $color-message-error--red;
          }

          .ng-invalid:not(.ng-pristine) + .error-message {
            display: block;
          }
        }

        .validated-field > .ng-invalid:not(.ng-pristine) {
          & ~ .error-message {
            display: block;
          }
        }

        .required-field::after {
          content: "*";
          color: $color-message-error--red;
          margin-left: 4px;
        }

        .duplicate-error,
        .dependency-error-section label.has-double-assignment {
          font-size: 14px;
          font-weight: bold;
          color: $color-message-error--red;
        }

        label.has-double-assignment {
          width: 100%;
          text-align: center;
        }

        .duplicate-error {
          text-align: center;
          width: 100%;
          margin-top: 10px;
        }

        tds-combobox.status > kendo-combobox {
          color: inherit;
          font-weight: normal;

          @include combo-status;

          span input {
            padding-top: 1px;
            padding-left: 5px;
          }

          span.k-i-close {
            display: block;
            color: inherit;
            opacity: 1;
            right: 0;
          }
        }

        td.label.edge-cell {
          height: 35px;
        }

        td.label.status-cell {
          height: 35px;
          max-height: 35px;
          display: inline-table;
          width: 100%;
        }

        td.valueNW.note {
          vertical-align: top;
        }

        td.valueNW {
          width: 160px;
          max-width: 160px;
          padding-top: 0;

          .category-list {
            margin-bottom: 2px;
          }

          .read-only-dates {
            padding-left: 5px;
          }

          kendo-dropdownlist {
            span.k-dropdown-wrap {
              background: white;
            }
          }

          kendo-dropdownlist.status {
            @include combo-status;
          }
        }

        td.description-container {
          max-width: 100%;

          input {
            width: 92%;
          }

          button {
            float: right;
          }
        }

        kendo-dropdownlist.k-widget.k-dropdown,
        kendo-datepicker.k-widget.k-datepicker,
        kendo-dateinput.k-widget.k-dateinput,
        .instructions-link input,
        .completion input,
        .completion .k-numerictextbox,
        textarea {
          width: 100%;
        }

        td.valueNW.estimated-finish {
          display: flex;
          max-width: unset;
          justify-content: space-between;
          width: 100%;
          align-items: center;
          padding-top: 4px;

          .estimated-date-container {
            width: 90%;
          }

          .delete-command {
            cursor: pointer;
          }
        }

        td.valueNW.estimated-finish {
          .disabled-delete-estimated {
            color: gray;
            cursor: none;
          }
        }

        .clickable {
          input {
            cursor: pointer;
          }
        }

        .duration-controls {
          display: flex;
          align-items: center;
          justify-content: space-between;

          .duration-value {
            flex: 32%;
            display: flex;
            flex-direction: column;

            input {
              width: 95%;
              text-align: center;
            }

            label {
              font-weight: normal;
              margin-bottom: 0;
              width: 85%;
              text-align: center;
            }
          }

          .lock-state {
            cursor: pointer;
          }
        }
      }

      .task-layout {
        display: flex;
        flex-direction: column;
      }

      .full-height {
        height: 100%;
        display: inline-flex;
      }

      .grow-container {
        display: flex;
        flex: 1;

        table.create-task {
          height: 100%;

          td {
            height: 100%;
          }
        }

        td {
          flex: 1;
          position: relative;

          .k-grid {
            position: relative;
            min-height: 100%;
            max-height: 150px;
          }
        }
      }

      .no-grow-container {
        flex: 0;

        .task-details {
          display: flex;
          flex-direction: column;
        }

        .dates-info-container {
          display: flex;

          .dates-info {
            padding-left: 5px;
            padding-right: 6px;
          }
        }
      }
    }

    .modal-footer {
      padding: 15px 18px;

      .action-button {
        padding-right: 5px;
      }
    }
  }

  .successor-predecessor-table {
    .k-grid-content {
      td {
        label {
          font-weight: normal;
        }
      }
    }

    thead {
      th.k-header {
        a {
          text-align: left;
        }
      }
    }

    td {
      padding-top: 8px !important;
      padding-bottom: 4px !important;
    }
  }

  .btn-collapsed-fixed-right {
    position: absolute;
    right: 20px;

    button.btn {
      padding: 4px 9px;

      i {
        padding-right: 0px;
      }
    }
  }
}

.task-detail-component.tds-ui-modal-decorator {
  overflow-y: auto !important;
}

// Kendo combo color rules has more specificity , in order to apply correct color status in those controls in this component
// without using !important, we need to give more specificity to status rules
.task-detail-component {
  .completion {
    margin: auto;
  }

  .task-status {
    .task-hold {
      @include task-hold;
    }

    .task-hold_overtime {
      @include task-hold_overtime;
    }

    .task-planned {
      @include task-planned;
    }

    .task-pending {
      @include task-pending;
    }

    .task-ready {
      @include task-ready;
    }

    .task-ready:hover {
      @include task-ready;
    }

    .task-started {
      @include task-started;
    }

    .task-completed2 {
      @include task-completed2;
    }

    .task-completed5 {
      @include task-completed5;
    }

    .task-completed {
      @include task-completed;
    }

    .task-done2 {
      @include task-done2;
    }

    .task-done5 {
      @include task-done5;
    }

    .task-done {
      @include task-done;
    }

    .task-na {
      @include task-na;
    }

    .task-term {
      @include task-term;
    }

    .task-tardy {
      @include task-tardy;
    }

    .task-late {
      @include task-late;
    }

    .task-overdue {
      @include task-overdue;
    }
  }
}
 */
