{"version":3,"sources":["webpack:///./web-app/app-js/modules/importBatch/components/detail/import-batch-detail-dialog.component.ts","webpack:///./web-app/app-js/modules/importBatch/components/import-assets/import-assets.component.ts","webpack:///./web-app/app-js/modules/importBatch/components/list/import-batch-list.component.ts","webpack:///./web-app/app-js/modules/importBatch/components/record/import-batch-record-dialog.component.ts","webpack:///./web-app/app-js/modules/importBatch/components/record/import-batch-record-summary.component.ts","webpack:///./web-app/app-js/modules/importBatch/import-batch-routing.states.ts","webpack:///./web-app/app-js/modules/importBatch/import-batch.module.ts"],"names":[],"mappings":"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","file":"6.js","sourcesContent":["import {Component, OnInit} from '@angular/core';\nimport {BatchStatus, ImportBatchModel} from '../../model/import-batch.model';\nimport {ImportBatchService} from '../../service/import-batch.service';\nimport {UIActiveDialogService, UIDialogService} from '../../../../shared/services/ui-dialog.service';\nimport {CellClickEvent, SelectableSettings} from '@progress/kendo-angular-grid';\nimport {DataGridOperationsHelper} from '../../../../shared/utils/data-grid-operations.helper';\nimport {ImportBatchRecordDetailColumnsModel, ImportBatchRecordModel} from '../../model/import-batch-record.model';\nimport {GridColumnModel} from '../../../../shared/model/data-list-grid.model';\nimport {ApiResponseModel} from '../../../../shared/model/ApiResponseModel';\nimport {KEYSTROKE} from '../../../../shared/model/constants';\nimport {NULL_OBJECT_PIPE} from '../../../../shared/pipes/utils.pipe';\nimport {PREFERENCES_LIST, IMPORT_BATCH_PREFERENCES, PreferenceService} from '../../../../shared/services/preference.service';\nimport {ImportBatchRecordDialogComponent} from '../record/import-batch-record-dialog.component';\nimport {ValidationUtils} from '../../../../shared/utils/validation.utils';\n\n@Component({\n\tselector: 'import-batch-detail-dialog',\n\ttemplateUrl: '../tds/web-app/app-js/modules/importBatch/components/detail/import-batch-detail-dialog.component.html',\n\thost: {\n\t\t'(keydown)': 'keyDownHandler($event)'\n\t}\n})\nexport class ImportBatchDetailDialogComponent implements OnInit {\n\n\tprivate BatchStatus = BatchStatus;\n\tprivate columnsModel: ImportBatchRecordDetailColumnsModel;\n\tprivate selectableSettings: SelectableSettings = { mode: 'single', checkboxOnly: false};\n\tprivate dataGridOperationsHelper: DataGridOperationsHelper;\n\tprivate checkboxSelectionConfig = {\n\t\tuseColumn: 'id'\n\t};\n\tprivate batchRecords: Array<ImportBatchRecordModel>;\n\tprivate batchRecordsFilter: any = {\n\t\toptions: [{id: 1, name: 'All'},\n\t\t\t{id: 2, name: 'Pending', filters: [\n\t\t\t\t{column: 'status.label', value: 'Pending'},\n\t\t\t]},\n\t\t\t{id: 3, name: 'Pending with Errors', filters: [\n\t\t\t\t{column: 'status.label', value: 'Pending'},\n\t\t\t\t{column: 'errorCount', value: 1, operator: 'gte'},\n\t\t\t]},\n\t\t\t{id: 4, name: 'Ignored', filters: [\n\t\t\t\t{column: 'status.label', value: 'Ignored'},\n\t\t\t]},\n\t\t\t{id: 5, name: 'Completed', filters: [\n\t\t\t\t{column: 'status.label', value: 'Completed'},\n\t\t\t]}],\n\t\tselected: {id: 1, name: 'All'}\n\t};\n\tprivate batchRecordsUpdatedFlag = false;\n\tprotected NULL_OBJECT_PIPE = NULL_OBJECT_PIPE;\n\tpublic dateTimeFormat: string;\n\tprivate importBatchPreferences = {};\n\n\tconstructor(\n\t\tprivate importBatchModel: ImportBatchModel,\n\t\tprivate importBatchService: ImportBatchService,\n\t\tprivate activeDialog: UIActiveDialogService,\n\t\tprivate dialogService: UIDialogService,\n\t\tprivate userPreferenceService: PreferenceService) {\n\t\t\tthis.batchRecords = [];\n\t\t\tthis.prepareColumnsModel();\n\t\t\tthis.onLoad();\n\t}\n\n\t/**\n\t * On Page Load\n\t */\n\tprivate onLoad(): void {\n\t\tthis.dateTimeFormat = this.userPreferenceService.getUserDateTimeFormat();\n\t\tthis.userPreferenceService.getSinglePreference(PREFERENCES_LIST.IMPORT_BATCH_PREFERENCES).subscribe( res => {\n\t\t\tif (res) {\n\t\t\t\tthis.importBatchPreferences = JSON.parse(res);\n\t\t\t\tconst match = this.batchRecordsFilter.options.find( item => item.name === this.importBatchPreferences[IMPORT_BATCH_PREFERENCES.RECORDS_FILTER]);\n\t\t\t\tif (match) {\n\t\t\t\t\tthis.batchRecordsFilter.selected = match;\n\t\t\t\t}\n\t\t\t}\n\t\t}, error => { console.error(error) });\n\t}\n\n\t/**\n\t * On Component Init get Import Batch Records.\n\t */\n\tngOnInit(): void {\n\t\tthis.loadImportBatchRecords();\n\t}\n\n\t/**\n\t * Load Import Batch Records from API.\n\t */\n\tprivate loadImportBatchRecords(): void {\n\t\tthis.importBatchService.getImportBatchRecords(this.importBatchModel.id).subscribe( (result: ApiResponseModel) => {\n\t\t\tif (result.status === ApiResponseModel.API_SUCCESS) {\n\t\t\t\tthis.batchRecords = result.data;\n\t\t\t\tthis.dataGridOperationsHelper = new DataGridOperationsHelper(this.batchRecords, [], this.selectableSettings, this.checkboxSelectionConfig);\n\t\t\t\tthis.onStatusFilter(this.batchRecordsFilter.selected, true);\n\t\t\t} else {\n\t\t\t\tthis.handleError(result.errors[0] ? result.errors[0] : 'error loading Batch Records');\n\t\t\t}\n\t\t}, error => this.handleError(error));\n\t}\n\n\t/**\n\t * Load A Single Batch Record from API.\n\t */\n\tprivate reloadSingleBatchRecord(batchRecord: ImportBatchRecordModel): void {\n\t\tthis.importBatchService.getImportBatchRecordUpdated(this.importBatchModel.id, batchRecord.id).subscribe((result: ImportBatchRecordModel) => {\n\t\t\tif (result) {\n\t\t\t\tObject.assign(batchRecord, result);\n\t\t\t} else {\n\t\t\t\tthis.loadImportBatchRecords();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Get and add the dyanmic batch record field columns.\n\t */\n\tprivate prepareColumnsModel(): void {\n\t\tthis.columnsModel = new ImportBatchRecordDetailColumnsModel();\n\t\tconst {fieldNameList, fieldLabelMap} = this.importBatchModel;\n\n\t\t// const mock: Array<string> = [ 'Name (P)', 'Type (P)', 'Dep Type (P)', 'Name (D)', 'Type (D)'];\n\t\tlet fieldColumns: Array<GridColumnModel> = fieldNameList.map( field => {\n\t\t\tconst column: GridColumnModel = new GridColumnModel();\n\t\t\tcolumn.label = (fieldLabelMap && fieldLabelMap[field]) || field;\n\t\t\tcolumn.properties = ['currentValues', field];\n\t\t\tcolumn.width = 130;\n\t\t\tcolumn.cellStyle = {'max-height': '20px'};\n\t\t\tcolumn.type = 'dynamicValue';\n\t\t\treturn column;\n\t\t});\n\t\tthis.columnsModel.columns = this.columnsModel.columns.concat(fieldColumns);\n\t}\n\n\t/**\n\t * On Row Click open the record detail extra popup.\n\t * @param $event\n\t */\n\tprivate openBatchRecordDetail(cellClick: CellClickEvent): void {\n\t\t// prevent open detail on column 0\n\t\tif (cellClick.columnIndex === 0 ) {\n\t\t\treturn;\n\t\t}\n\t\tthis.dataGridOperationsHelper.selectCell(cellClick); // mark row as selected\n\t\tlet selectedBatchRecord = (cellClick as any).dataItem;\n\t\t// prevent errors when clicking empty rows ..\n\t\tif (!selectedBatchRecord || !selectedBatchRecord.id) {\n\t\t\treturn;\n\t\t}\n\t\tthis.dialogService.extra(ImportBatchRecordDialogComponent, [\n\t\t\t\t{provide: ImportBatchModel, useValue: this.importBatchModel},\n\t\t\t\t{provide: ImportBatchRecordModel, useValue: selectedBatchRecord}\n\t\t\t], false, false)\n\t\t\t.then((result) => {\n\t\t\t\tif (result === 'reload') {\n\t\t\t\t\tthis.reloadSingleBatchRecord(selectedBatchRecord);\n\t\t\t\t\tthis.batchRecordsUpdatedFlag = true;\n\t\t\t\t}\n\t\t\t}).catch( result => { console.log('dismissed'); });\n\t}\n\n\t/**\n\t * Handles API errors and displays it on UI.\n\t * @param error\n\t */\n\tprivate handleError(error): void {\n\t\tconsole.log(error);\n\t}\n\n\t/**\n\t * Close the Dialog but first it verify is not Dirty\n\t */\n\tprivate cancelCloseDialog(): void {\n\t\tthis.activeDialog.close(this.batchRecordsUpdatedFlag);\n\t}\n\n\t/**\n\t * Clear the batchRecordsFilter if needed (depending on column that was changed)\n\t * @param {GridColumnModel} column\n\t */\n\tprivate preProcessFilter(column: GridColumnModel): void {\n\t\tthis.clearStatusFilter(column);\n\t\tthis.dataGridOperationsHelper.onFilter(column);\n\t}\n\n\t/**\n\t * Clear the batchRecordsFilter if needed (depending on column that was changed)\n\t */\n\tprivate preProcessClear(column: GridColumnModel): void {\n\t\tthis.clearStatusFilter(column);\n\t\tthis.dataGridOperationsHelper.clearValue(column);\n\t}\n\n\t/**\n\t * Clear batchRecordsFilter to default All option.\n\t * @param {GridColumnModel} column\n\t */\n\tprivate clearStatusFilter(column: GridColumnModel): void {\n\t\tif (column.property === 'status.label' || column.property === 'errorCount') {\n\t\t\tthis.batchRecordsFilter.selected = {id: 1, name: 'All'};\n\t\t}\n\t}\n\n\t/**\n\t * On Status Select Filter Select handle the multi filter on status + errors.\n\t * @param $event\n\t * @param avoidPreferenceSave used when we want to stop saving the filter in user preferences.\n\t */\n\tprivate onStatusFilter(event, avoidPreferenceSave = false) {\n\t\tfor (const columnProperty of ['status.label', 'errorCount']) {\n\t\t\tlet foundMatch: GridColumnModel = this.columnsModel.columns.find( (column: GridColumnModel) => column.property === columnProperty );\n\t\t\tfoundMatch.filter = null;\n\t\t\tthis.dataGridOperationsHelper.clearValue(foundMatch);\n\t\t}\n\t\tif (event.id !== 1) {\n\t\t\tfor (const filter of event.filters) {\n\t\t\t\tlet foundMatch: GridColumnModel = this.columnsModel.columns.find( (column: GridColumnModel) => column.property === filter.column );\n\t\t\t\tif (foundMatch) {\n\t\t\t\t\tfoundMatch.filter = filter.value;\n\t\t\t\t\tthis.dataGridOperationsHelper.onFilter(foundMatch, event.id === 3 ? 'gte' : null);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!avoidPreferenceSave) {\n\t\t\tthis.importBatchPreferences[IMPORT_BATCH_PREFERENCES.RECORDS_FILTER] = event.name;\n\t\t\tthis.userPreferenceService.setPreference(PREFERENCES_LIST.IMPORT_BATCH_PREFERENCES, JSON.stringify(this.importBatchPreferences)).subscribe( r => { /**/});\n\t\t}\n\t}\n\n\t/**\n\t * On Ignore button click.\n\t */\n\tprivate onIgnore(): void {\n\t\tconst ids = this.dataGridOperationsHelper.getCheckboxSelectedItemsAsNumbers();\n\t\tthis.importBatchService.ignoreBatchRecords(this.importBatchModel.id, ids)\n\t\t\t.subscribe((result: ApiResponseModel) => {\n\t\t\t\tif (result.status === ApiResponseModel.API_SUCCESS) {\n\t\t\t\t\tthis.loadImportBatchRecords();\n\t\t\t\t\tthis.batchRecordsUpdatedFlag = true;\n\t\t\t\t} else {\n\t\t\t\t\tthis.handleError(result.errors[0] ? result.errors[0] : 'error on bulk ignore batch records.');\n\t\t\t\t}\n\t\t\t}, error => this.handleError(error));\n\t}\n\n\t/**\n\t * On Process button click\n\t */\n\tprivate onProcess(): void {\n\t\tconst ids = this.dataGridOperationsHelper.getCheckboxSelectedItemsAsNumbers();\n\t\tthis.importBatchService.processBatchRecords(this.importBatchModel.id, ids)\n\t\t\t.subscribe((result: ApiResponseModel) => {\n\t\t\t\tif (result.status === ApiResponseModel.API_SUCCESS) {\n\t\t\t\t\tthis.loadImportBatchRecords();\n\t\t\t\t\tthis.batchRecordsUpdatedFlag = true;\n\t\t\t\t} else {\n\t\t\t\t\tthis.handleError(result.errors[0] ? result.errors[0] : 'error on bulk Process batch records.');\n\t\t\t\t}\n\t\t\t}, error => this.handleError(error));\n\t}\n\n\t/**\n\t * Can Batch Record perform any bulk operation? (PROCESS or IGNORE).\n\t * @param {ImportBatchRecordModel} batchRecord\n\t * @returns {boolean}\n\t */\n\tprivate batchRecordCanAction(batchRecord: ImportBatchRecordModel): boolean {\n\t\treturn batchRecord.status.code === BatchStatus.PENDING || batchRecord.status.code === BatchStatus.IGNORED;\n\t}\n\n\t/**\n\t * Detect if the use has pressed the on Escape to close the dialog and popup if there are pending changes.\n\t * @param {KeyboardEvent} event\n\t */\n\tprivate keyDownHandler($event: KeyboardEvent): void {\n\t\tif ($event && $event.code === KEYSTROKE.ESCAPE) {\n\t\t\tthis.cancelCloseDialog();\n\t\t}\n\t}\n\n\t/**\n\t * Determines which value to print on the batch record dynamic values, can be direct value, init or null.\n\t * @returns {string}\n\t */\n\tprotected getInitOrValue(dataItem: ImportBatchRecordModel, column: GridColumnModel): string {\n\t\tconst isEmptyVal = !dataItem.currentValues[column.properties[1]] || ValidationUtils.isEmptyObject(dataItem.currentValues[column.properties[1]])\n\t\tif (isEmptyVal && dataItem.init) {\n\t\t\tconst isEmptyInit = !dataItem.init[column.properties[1]] || ValidationUtils.isEmptyObject(dataItem.init[column.properties[1]]);\n\t\t\treturn  !isEmptyInit ? dataItem.init[column.properties[1]] : '(null)';\n\t\t}\n\t\treturn isEmptyVal ? '(null)' : dataItem.currentValues[column.properties[1]];\n\t}\n\n\t/**\n\t * Determines if value of current record value is INIT value.\n\t * @returns {string}\n\t */\n\tprotected hasInitVal(dataItem: ImportBatchRecordModel, column: GridColumnModel): boolean {\n\t\tconst isEmptyVal = !dataItem.currentValues[column.properties[1]] || ValidationUtils.isEmptyObject(dataItem.currentValues[column.properties[1]])\n\t\tif (isEmptyVal && dataItem.init) {\n\t\t\tconst isEmptyInit = !dataItem.init[column.properties[1]] || ValidationUtils.isEmptyObject(dataItem.init[column.properties[1]]);\n\t\t\treturn  !isEmptyInit;\n\t\t}\n\t\treturn false;\n\t}\n}","import {Component, OnInit, ViewChild} from '@angular/core';\nimport {ImportAssetsService} from '../../service/import-assets.service';\nimport {NotifierService} from '../../../../shared/services/notifier.service';\nimport {AlertType} from '../../../../shared/model/alert.model';\nimport {RemoveEvent, SuccessEvent, UploadComponent, UploadEvent} from '@progress/kendo-angular-upload';\nimport {KendoFileUploadBasicConfig} from '../../../../shared/providers/kendo-file-upload.interceptor';\nimport {ApiResponseModel} from '../../../../shared/model/ApiResponseModel';\n\nimport {\n\tDataScriptService,\n\tPROGRESSBAR_COMPLETED_STATUS, PROGRESSBAR_FAIL_STATUS\n} from '../../../dataScript/service/data-script.service';\nimport {\n\tASSET_IMPORT_FILE_UPLOAD_TYPE,\n\tETL_SCRIPT_FILE_UPLOAD_TYPE,\n\tFILE_UPLOAD_TYPE_PARAM,\n\tPROGRESSBAR_INTERVAL_TIME\n} from '../../../../shared/model/constants';\nimport {ImportBatchStates} from '../../import-batch-routing.states';\n\ndeclare var jQuery: any;\n\n@Component({\n\tselector: 'import-assets',\n\ttemplateUrl: '../tds/web-app/app-js/modules/importBatch/components/import-assets/import-assets.component.html'\n})\nexport class ImportAssetsComponent implements OnInit {\n\n\t@ViewChild('kendoUploadInstance') kendoUploadInstance: UploadComponent;\n\tprivate file: KendoFileUploadBasicConfig = new KendoFileUploadBasicConfig();\n\tprivate actionOptions = [];\n\tprivate dataScriptOptions = [];\n\tprivate selectedActionOption = -1;\n\tprivate selectedScriptOption = -1;\n\tprivate fetchResult: any;\n\tprivate fetchInProcess = false;\n\tprivate fetchInputUsed: 'action' | 'file' = 'action';\n\tprotected transformResult: ApiResponseModel;\n\tprotected transformInProcess = false;\n\tprivate importResult: any;\n\tprivate importInProcess = false;\n\tprivate fetchFileContent: any;\n\tprivate transformFileContent: any;\n\tprivate viewDataType: string;\n\tprotected uiConfig: any = {\n\t\tlabelColSize: 3,\n\t\tinputColSize: 3,\n\t\tbuttonColSize: 1,\n\t\turlColSize: 2\n\t};\n\tprotected transformProgress = {\n\t\tprogressKey: null,\n\t\tcurrentProgress: 0,\n\t};\n\tprivate transformInterval: any;\n\tprotected IMPORT_BATCH_STATES = ImportBatchStates;\n\n\tconstructor(\n\t\tprivate importAssetsService: ImportAssetsService,\n\t\tprivate notifier: NotifierService,\n\t\tprivate dataIngestionService: DataScriptService) {\n\t\t\tthis.file.fileUID = null;\n\t}\n\n\tngOnInit(): void {\n\t\tthis.importAssetsService.getManualOptions().subscribe( (result) => {\n\t\t\tthis.actionOptions = result.actions;\n\t\t\tthis.dataScriptOptions = result.dataScripts;\n\t\t});\n\t}\n\n\t/**\n\t * Fetch button clicked event.\n\t * Calls the process of fetch.\n\t */\n\tprivate onFetch(): void {\n\t\tthis.fetchInProcess = true;\n\t\tthis.fetchResult = null;\n\t\tthis.fetchFileContent = null;\n\t\tthis.transformResult = null;\n\t\tthis.transformFileContent = null;\n\t\tthis.importResult = null;\n\t\t// this.selectedScriptOption = null;\n\t\tthis.importAssetsService.postFetch(this.selectedActionOption).subscribe( (result) => {\n\t\t\tthis.fetchResult = {\n\t\t\t\tstatus: result.status\n\t\t\t};\n\t\t\tthis.fetchInputUsed = 'action';\n\t\t\tif (result.status === 'error') {\n\t\t\t\tthis.notifier.broadcast({\n\t\t\t\t\tname: AlertType.DANGER,\n\t\t\t\t\tmessage: result.errors[0]\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.fetchResult.filename = result.data.filename;\n\t\t\t}\n\t\t\tthis.fetchInProcess = false;\n\t\t} );\n\t}\n\n\t/**\n\t * Event when action script select changes its value.\n\t * @param event\n\t */\n\tprivate onActionScriptChange(event: any): void {\n\t\tlet matchedScript = this.dataScriptOptions.find( script => script.id === event.defaultDataScriptId );\n\t\tif (matchedScript) {\n\t\t\tthis.selectedScriptOption = matchedScript;\n\t\t}\n\t}\n\n\t/**\n\t * Transform button clicked event.\n\t * Calls Transform process on endpoint.\n\t */\n\tprotected onTransform(): void {\n\t\tthis.transformInProcess = true;\n\t\tthis.transformResult = null;\n\t\tthis.transformFileContent = null;\n\t\tthis.importResult = null;\n\t\tthis.importAssetsService.postTransform(this.selectedScriptOption, this.fetchResult.filename).subscribe( (result: ApiResponseModel) => {\n\t\t\tif (result.status === ApiResponseModel.API_SUCCESS && result.data.progressKey) {\n\t\t\t\tthis.transformProgress.progressKey = result.data.progressKey;\n\t\t\t\tthis.setTransformProgressInterval();\n\t\t\t} else {\n\t\t\t\tthis.transformResult = new ApiResponseModel();\n\t\t\t\tthis.transformResult.status = ApiResponseModel.API_ERROR;\n\t\t\t\tthis.transformResult.data = {};\n\t\t\t}\n\t\t}, error => {\n\t\t\tthis.transformResult = new ApiResponseModel();\n\t\t\tthis.transformResult.status = ApiResponseModel.API_ERROR;\n\t\t\tthis.transformResult.data = {};\n\t\t\tthis.transformInProcess = false;\n\t\t});\n\t}\n\n\t/**\n\t * Clears out the Transform interval loop.\n\t */\n\tprivate clearTestScriptProgressInterval(): void {\n\t\tclearInterval(this.transformInterval);\n\t}\n\n\t/**\n\t * Creates an interval loop to retreive Transform current progress.\n\t */\n\tprivate setTransformProgressInterval(): void {\n\t\tthis.transformProgress.currentProgress = 1;\n\t\tthis.transformInterval = setInterval(() => {\n\t\t\tthis.getTransformProgress();\n\t\t}, PROGRESSBAR_INTERVAL_TIME);\n\t}\n\n\t/**\n\t * Operation of the Test Script interval that will be executed n times in a loop.\n\t */\n\tprivate getTransformProgress(): void {\n\t\tthis.dataIngestionService.getJobProgress(this.transformProgress.progressKey)\n\t\t\t.subscribe( (response: ApiResponseModel) => {\n\t\t\t\tlet currentProgress = response.data.percentComp;\n\t\t\t\tthis.transformProgress.currentProgress = currentProgress;\n\t\t\t\t// On Fail\n\t\t\t\tif (response.data.status === PROGRESSBAR_FAIL_STATUS) {\n\t\t\t\t\tthis.handleTransformResultError(response.data.detail);\n\t\t\t\t\tthis.transformInProcess = false;\n\t\t\t\t\tthis.clearTestScriptProgressInterval();\n\t\t\t\t} else if (currentProgress === 100 && response.data.status === PROGRESSBAR_COMPLETED_STATUS) {\n\t\t\t\t\t// On finish without filename output (Fail)\n\t\t\t\t\tif (!response.data.detail) {\n\t\t\t\t\t\tthis.handleTransformResultError('The generated intermediate ETL data file could not be accessed.');\n\t\t\t\t\t\tthis.transformInProcess = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// On Success\n\t\t\t\t\t\tsetTimeout( () => {\n\t\t\t\t\t\t\tthis.transformResult = new ApiResponseModel();\n\t\t\t\t\t\t\tthis.transformResult.status = ApiResponseModel.API_SUCCESS;\n\t\t\t\t\t\t\tthis.transformResult.data = {filename: response.data.detail};\n\t\t\t\t\t\t\tthis.transformInProcess = false;\n\t\t\t\t\t\t}, 500);\n\t\t\t\t\t}\n\t\t\t\t\tthis.clearTestScriptProgressInterval();\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprivate handleTransformResultError(errorMessage: string): void {\n\t\tthis.transformResult = new ApiResponseModel();\n\t\tthis.transformResult.status = ApiResponseModel.API_ERROR;\n\t\tthis.notifier.broadcast({\n\t\t\tname: AlertType.DANGER,\n\t\t\tmessage: errorMessage\n\t\t});\n\t}\n\n\t/**\n\t * Import button clicked event.\n\t * Calls Import process on endpoint.\n\t */\n\tprivate onImport(): void {\n\t\tthis.importInProcess = true;\n\t\tthis.importResult = null;\n\t\tthis.importAssetsService.postImport(this.transformResult.data.filename).subscribe( (result) => {\n\t\t\tthis.importResult = result;\n\t\t\tthis.importInProcess = false;\n\t\t});\n\t}\n\n\t/**\n\t * Gets the raw data of the view data fetch file content result.\n\t * @returns {string}\n\t */\n\tprivate getFetchFileContentValue(): string {\n\t\tif (this.fetchFileContent) {\n\t\t\treturn JSON.stringify(this.fetchFileContent);\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t}\n\n\t/**\n\t * Gets the raw data of the view data transform file content result.\n\t * @returns {string}\n\t */\n\tprivate getTransformFileContentValue(): string {\n\t\tif (this.transformFileContent) {\n\t\t\treturn JSON.stringify(this.transformFileContent);\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t}\n\n\t/**\n\t * View data clicked event.\n\t * Calls endpoint to get file content result.\n\t * @param {string} type : can be either 'Fetch' or 'Transform'\n\t */\n\tprivate onViewData(type: string): void {\n\t\tthis.viewDataType = type;\n\t\tif (this.viewDataType === 'FETCH') {\n\t\t\tthis.fetchFileContent = null;\n\t\t\tthis.importAssetsService.getFileContent(this.fetchResult.filename).subscribe((result) => {\n\t\t\t\tthis.fetchFileContent = result;\n\t\t\t});\n\t\t} else {\n\t\t\tthis.transformFileContent = null;\n\t\t\tthis.importAssetsService.getFileContent(this.transformResult.data.filename).subscribe((result) => {\n\t\t\t\tthis.transformFileContent = result;\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Close clicked event.\n\t * Cleans out results for fetch and transform.\n\t */\n\tprivate onCloseFileContents(): void {\n\t\tthis.fetchFileContent = null;\n\t\tthis.transformFileContent = null;\n\t\tthis.viewDataType = null;\n\t}\n\n\t/**\n\t * Clear clicked event.\n\t * Clears out most of results peformed on the page.\n\t */\n\tprivate onClear(): void {\n\t\tthis.removeFileByUID();\n\t}\n\n\tprivate disableTransformButton() {\n\t\treturn !this.selectedScriptOption || this.selectedScriptOption === -1\n\t\t\t|| !this.fetchResult || !this.fetchResult.filename || this.fetchResult.status === ApiResponseModel.API_ERROR;\n\t}\n\n\tprivate clearFilename(e?: any) {\n\t\tthis.fetchResult = null;\n\t\tthis.fetchFileContent = null;\n\t}\n\n\tprivate onSelectFile(e?: any): void {\n\t\tthis.file.fileUID = e.files[0].uid;\n\t}\n\n\tprivate onRemoveFile(e: RemoveEvent): void {\n\t\tif (!this.fetchResult || !this.fetchResult.filename) {\n\t\t\treturn;\n\t\t}\n\t\t// delete temporary server uploaded file\n\t\tconst tempServerFilesToDelete = [ this.fetchResult.filename ];\n\n\t\t// delete temporary transformed file\n\t\tif (this.transformResult) {\n\t\t\ttempServerFilesToDelete.push(this.transformResult.data.filename)\n\t\t}\n\n\t\t// get the coma separated file names to delete\n\t\te.data = { filename: tempServerFilesToDelete.join(',') };\n\n\t\tthis.fetchResult = null;\n\t\tthis.fetchFileContent = null;\n\t\tthis.transformResult = null;\n\t\tthis.transformFileContent = null;\n\t\tthis.viewDataType = null;\n\t\tthis.importResult = null;\n\t}\n\n\tprivate onUploadFile(e: UploadEvent): void {\n\t\te.data = {};\n\t\te.data[FILE_UPLOAD_TYPE_PARAM] = ASSET_IMPORT_FILE_UPLOAD_TYPE;\n\t\tthis.clearFilename();\n\t}\n\n\tprivate removeFileByUID(): void {\n\t\tif (this.file.fileUID) {\n\t\t\tthis.kendoUploadInstance.removeFilesByUid(this.file.fileUID);\n\t\t}\n\t}\n\n\tprivate completeEventHandler(e: SuccessEvent) {\n\t\tlet response = e.response.body.data;\n\t\tif (response.operation === 'delete') { // file deleted successfully\n\t\t\t// console.log(response.data);\n\t\t\tthis.clearFilename();\n\t\t\tthis.file.fileUID = null;\n\t\t} else if (response.filename) { // file uploaded successfully\n\t\t\tlet filename = response.filename;\n\t\t\tthis.fetchResult = { status: 'success', filename: filename };\n\t\t\tthis.fetchInputUsed = 'file';\n\t\t} else {\n\t\t\tthis.clearFilename();\n\t\t\tthis.fetchResult = { status: 'error' };\n\t\t}\n\t}\n}","import {AfterViewInit, Component, OnDestroy, OnInit} from '@angular/core';\nimport {ImportBatchService} from '../../service/import-batch.service';\nimport {PermissionService} from '../../../../shared/services/permission.service';\nimport {BatchStatus, ImportBatchColumnsModel, ImportBatchModel} from '../../model/import-batch.model';\nimport {CellClickEvent, PageChangeEvent, SelectableSettings} from '@progress/kendo-angular-grid';\nimport {Permission} from '../../../../shared/model/permission.model';\nimport {NotifierService} from '../../../../shared/services/notifier.service';\nimport {AlertType} from '../../../../shared/model/alert.model';\nimport {UIDialogService} from '../../../../shared/services/ui-dialog.service';\nimport {\n\tDIALOG_SIZE, PROMPT_DEFAULT_TITLE_KEY, PROMPT_DELETE_ITEM_CONFIRMATION,\n\tPROMPT_DELETE_ITEMS_CONFIRMATION\n} from '../../../../shared/model/constants';\nimport {ApiResponseModel} from '../../../../shared/model/ApiResponseModel';\nimport {GridColumnModel} from '../../../../shared/model/data-list-grid.model';\nimport {IMPORT_BATCH_PREFERENCES, PREFERENCES_LIST, PreferenceService} from '../../../../shared/services/preference.service';\nimport {GRID_DEFAULT_PAGE_SIZE} from '../../../../shared/model/constants';\nimport {UIPromptService} from '../../../../shared/directives/ui-prompt.directive';\nimport {TranslatePipe} from '../../../../shared/pipes/translate.pipe';\nimport {DataGridOperationsHelper} from '../../../../shared/utils/data-grid-operations.helper';\nimport {EnumModel} from '../../../../shared/model/enum.model';\nimport {ImportBatchDetailDialogComponent} from '../detail/import-batch-detail-dialog.component';\nimport {ActivatedRoute} from '@angular/router';\n\n@Component({\n\tselector: 'import-batch-list',\n\ttemplateUrl: '../tds/web-app/app-js/modules/importBatch/components/list/import-batch-list.component.html',\n\tproviders: [TranslatePipe]\n})\nexport class ImportBatchListComponent implements OnDestroy {\n\n\tpublic userTimeZone: string;\n\n\tprotected BatchStatus = BatchStatus;\n\tprotected columnsModel: ImportBatchColumnsModel;\n\tprotected importBatchPreferences = {};\n\tprivate selectableSettings: SelectableSettings = { mode: 'single', checkboxOnly: false};\n\tprivate dataGridOperationsHelper: DataGridOperationsHelper;\n\tprivate initialSort: any = [{\n\t\tdir: 'desc',\n\t\tfield: 'dateCreated'\n\t}];\n\tprivate checkboxSelectionConfig = {\n\t\tuseColumn: 'id'\n\t};\n\tprivate viewArchived = false;\n\tprivate batchRunningLoop: any;\n\tprivate batchQueuedLoop: any;\n\tprivate readonly PROGRESS_MAX_TRIES = 10;\n\tprivate readonly PROGRESS_CHECK_INTERVAL = 3 * 1000;\n\tprivate readonly STOP_BATCH_CONFIRMATION = 'IMPORT_BATCH.LIST.STOP_BATCH_CONFIRMATION';\n\tprivate readonly ARCHIVE_ITEM_CONFIRMATION = 'IMPORT_BATCH.LIST.ARCHIVE_ITEM_CONFIRMATION';\n\tprivate readonly ARCHIVE_ITEMS_CONFIRMATION = 'IMPORT_BATCH.LIST.ARCHIVE_ITEMS_CONFIRMATION';\n\tprivate readonly UNARCHIVE_ITEM_CONFIRMATION = 'IMPORT_BATCH.LIST.UNARCHIVE_ITEM_CONFIRMATION';\n\tprivate readonly UNARCHIVE_ITEMS_CONFIRMATION = 'IMPORT_BATCH.LIST.UNARCHIVE_ITEMS_CONFIRMATION';\n\tprivate runningBatches: Array<ImportBatchModel> = [];\n\tprivate queuedBatches: Array<ImportBatchModel> = [];\n\n\tconstructor(\n\t\tprivate dialogService: UIDialogService,\n\t\tprivate importBatchService: ImportBatchService,\n\t\tprivate permissionService: PermissionService,\n\t\tprivate promptService: UIPromptService,\n\t\tprivate translatePipe: TranslatePipe,\n\t\tprivate notifierService: NotifierService,\n\t\tprivate userPreferenceService: PreferenceService,\n\t\tprivate route: ActivatedRoute) {\n\t\t\tthis.onLoad();\n\t}\n\n\t/**\n\t * On Page Load.\n\t */\n\tprivate onLoad(): void {\n\t\t// Fetch the user preferences for their TimeZone and DateFormat\n\t\tthis.userTimeZone = this.userPreferenceService.getUserTimeZone();\n\n\t\tthis.columnsModel = new ImportBatchColumnsModel();\n\t\tif ( !this.canRunActions() ) {\n\t\t\tthis.columnsModel.columns.splice(0, 1);\n\t\t}\n\t\tthis.userPreferenceService.getSinglePreference(PREFERENCES_LIST.IMPORT_BATCH_PREFERENCES).subscribe( res => {\n\t\t\tthis.getUnarchivedBatches().then( batchList => {\n\t\t\t\tlet pageSize;\n\t\t\t\tif (res) {\n\t\t\t\t\tthis.importBatchPreferences = JSON.parse(res);\n\t\t\t\t\tpageSize = parseInt(this.importBatchPreferences[IMPORT_BATCH_PREFERENCES.LIST_SIZE], 0);\n\t\t\t\t} else {\n\t\t\t\t\tpageSize = GRID_DEFAULT_PAGE_SIZE;\n\t\t\t\t}\n\t\t\t\tthis.dataGridOperationsHelper = new DataGridOperationsHelper(batchList, this.initialSort, this.selectableSettings, this.checkboxSelectionConfig, pageSize);\n\t\t\t\tthis.preSelectBatch();\n\t\t\t\tthis.setRunningLoop();\n\t\t\t\tthis.setQueuedLoop();\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Checks if batchId is given and should be open.\n\t */\n\tprivate preSelectBatch(): void {\n\t\tthis.route.params.subscribe(params => {\n\t\t\tconst batchId = params['id'] ? parseInt(params['id'], 0) : null;\n\t\t\tconst match = !batchId ? null : this.dataGridOperationsHelper.resultSet.find( item => item.id === batchId);\n\t\t\tif (batchId && match) {\n\t\t\t\tlet cellClickEvent = { dataItem: match };\n\t\t\t\tthis.openBatchDetail(cellClickEvent);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Used in template to forward click events from the element to the target parentNode\n\t * @param event: any\n\t */\n\tpublic onClickTemplate(event: any): void {\n\t\tif (event.target && event.target.parentNode) {\n\t\t\tevent.target.parentNode.click();\n\t\t}\n\t}\n\n\t/**\n\t * Load all Import Batch Unarchived list\n\t */\n\tprivate reloadBatchList(): void {\n\t\tthis.getUnarchivedBatches().then( batchList => {\n\t\t\tthis.dataGridOperationsHelper.reloadData(batchList);\n\t\t\tthis.clearLoopsLists();\n\t\t});\n\t}\n\n\t/**\n\t * Reloads the current batch record.\n\t * Stops looper and restarts it.\n\t * @param {ImportBatchModel} batchRecord\n\t */\n\tprivate reloadImportBatch(batch: ImportBatchModel) {\n\t\tthis.importBatchService.getImportBatch(batch.id).subscribe( (response: ApiResponseModel) => {\n\t\t\t\tif (response.status === ApiResponseModel.API_SUCCESS) {\n\t\t\t\t\tObject.assign(batch, response.data);\n\t\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Get Unarchived Import Batch List.\n\t * Calling the endpoint as a Promise for reuse.\n\t * @returns {Array<ImportBatchModel>}\n\t */\n\tprivate getUnarchivedBatches(): Promise<any> {\n\t\tlet promise = new Promise((resolve, reject) => {\n\t\t\tthis.importBatchService.getImportBatches().subscribe( (result) => {\n\t\t\t\tif (result.status === 'success') {\n\t\t\t\t\tlet batches: Array<ImportBatchModel> = result.data.filter( item => {\n\t\t\t\t\t\treturn !item.archived;\n\t\t\t\t\t});\n\t\t\t\t\tresolve(batches);\n\t\t\t\t} else {\n\t\t\t\t\tthis.handleError(result.errors ? result.errors[0] : null);\n\t\t\t\t\tresolve([]);\n\t\t\t\t}\n\t\t\t}, (err) => {\n\t\t\t\tthis.handleError(err);\n\t\t\t\tresolve([]);\n\t\t\t});\n\t\t});\n\t\treturn promise;\n\t}\n\n\t/**\n\t * Load Archived Batches.\n\t */\n\tprivate loadArchivedBatchList(): void {\n\t\tthis.importBatchService.getImportBatches().subscribe( result => {\n\t\t\tif (result.status === 'success') {\n\t\t\t\tlet batches = result.data.filter( (item: ImportBatchModel) => {\n\t\t\t\t\treturn item.archived;\n\t\t\t\t});\n\t\t\t\tthis.dataGridOperationsHelper.reloadData(batches);\n\t\t\t\tthis.clearLoopsLists();\n\t\t\t} else {\n\t\t\t\tthis.handleError(result.errors ? result.errors[0] : null);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Open Dialog Popups to display Batch Import detail.\n\t * @param {CellClickEvent} cellClick\n\t */\n\tprivate openBatchDetail(cellClick: any): void {\n\t\t// prevent open detail on column 0\n\t\tlet selectedBatch: ImportBatchModel = cellClick.dataItem;\n\t\tif (cellClick.columnIndex === 0 ) {\n\t\t\treturn;\n\t\t}\n\t\tthis.dataGridOperationsHelper.selectCell(cellClick); // mark row as selected\n\t\tthis.dialogService.open(ImportBatchDetailDialogComponent, [\n\t\t\t{ provide: ImportBatchModel, useValue: selectedBatch}\n\t\t], DIALOG_SIZE.XXL).then(result => {\n\t\t\tif (result) {\n\t\t\t\tthis.reloadImportBatch(selectedBatch);\n\t\t\t}\n\t\t}).catch(result => {\n\t\t\tconsole.log('Dismissed Dialog');\n\t\t});\n\t}\n\n\t/**\n\t * Confirmation to proceed with the archive of the batches.\n\t */\n\tprivate confirmArchive(): void {\n\t\tconst ids = this.dataGridOperationsHelper.getCheckboxSelectedItems().map( item => parseInt(item, 10));\n\t\tthis.promptService.open(\n\t\t\tthis.translatePipe.transform(PROMPT_DEFAULT_TITLE_KEY),\n\t\t\tthis.translatePipe.transform(ids.length === 1 ? this.ARCHIVE_ITEM_CONFIRMATION : this.ARCHIVE_ITEMS_CONFIRMATION),\n\t\t\t'Confirm', 'Cancel').then(result => {\n\t\t\tif (result) {\n\t\t\t\tthis.onArchiveBatch();\n\t\t\t}\n\t\t}, (reason: any) => console.log('confirm rejected', reason));\n\t}\n\n\t/**\n\t * On Archive batch button click.\n\t */\n\tprivate onArchiveBatch(): void {\n\t\tconst ids = this.dataGridOperationsHelper.getCheckboxSelectedItemsAsNumbers();\n\t\tthis.importBatchService.archiveImportBatches(ids).subscribe( (result: ApiResponseModel) => {\n\t\t\t\tif (result.status === ApiResponseModel.API_SUCCESS) {\n\t\t\t\t\tthis.reloadBatchList();\n\t\t\t\t\tthis.dataGridOperationsHelper.unSelectAllCheckboxes();\n\t\t\t\t} else {\n\t\t\t\t\tthis.handleError(result.errors ? result.errors[0] : null);\n\t\t\t\t}\n\t\t\t},\n\t\t\t(err) => this.handleError(err)\n\t\t);\n\t}\n\n\t/**\n\t * Confirmation to proceed with the archive of the batches.\n\t */\n\tprivate confirmUnarchive(): void {\n\t\tconst ids = this.dataGridOperationsHelper.getCheckboxSelectedItems().map( item => parseInt(item, 10));\n\t\tthis.promptService.open(\n\t\t\tthis.translatePipe.transform(PROMPT_DEFAULT_TITLE_KEY),\n\t\t\tthis.translatePipe.transform(ids.length === 1 ? this.UNARCHIVE_ITEM_CONFIRMATION : this.UNARCHIVE_ITEMS_CONFIRMATION),\n\t\t\t'Confirm', 'Cancel').then(result => {\n\t\t\tif (result) {\n\t\t\t\tthis.onUnarchiveBatch();\n\t\t\t}\n\t\t}, (reason: any) => console.log('confirm rejected', reason));\n\t}\n\n\t/**\n\t * On UnArchive batch button click.\n\t */\n\tprivate onUnarchiveBatch(): void {\n\t\tconst ids = this.dataGridOperationsHelper.getCheckboxSelectedItemsAsNumbers();\n\t\tthis.importBatchService.unArchiveImportBatches(ids).subscribe( (result: ApiResponseModel) => {\n\t\t\t\tif (result.status === ApiResponseModel.API_SUCCESS) {\n\t\t\t\t\tthis.loadArchivedBatchList();\n\t\t\t\t\tthis.dataGridOperationsHelper.unSelectAllCheckboxes();\n\t\t\t\t} else {\n\t\t\t\t\tthis.handleError(result.errors ? result.errors[0] : null);\n\t\t\t\t}\n\t\t\t},\n\t\t\t(err) => this.handleError(err)\n\t\t);\n\t}\n\n\t/**\n\t * Confirmation to proceed with the delete of the batches.\n\t */\n\tprivate confirmDelete(): void {\n\t\tconst ids = this.dataGridOperationsHelper.getCheckboxSelectedItems().map( item => parseInt(item, 10));\n\t\tthis.promptService.open(\n\t\t\tthis.translatePipe.transform(PROMPT_DEFAULT_TITLE_KEY),\n\t\t\tthis.translatePipe.transform(ids.length === 1 ? PROMPT_DELETE_ITEM_CONFIRMATION : PROMPT_DELETE_ITEMS_CONFIRMATION),\n\t\t\t'Confirm', 'Cancel').then(result => {\n\t\t\tif (result) {\n\t\t\t\tthis.onDeleteBatch();\n\t\t\t}\n\t\t}, (reason: any) => console.log('confirm rejected', reason));\n\t}\n\n\t/**\n\t * On Delete batch button click.\n\t */\n\tprivate onDeleteBatch(): void {\n\t\tconst ids = this.dataGridOperationsHelper.getCheckboxSelectedItems().map( item => parseInt(item, 10));\n\t\tthis.importBatchService.deleteImportBatches(ids).subscribe( (result: ApiResponseModel) => {\n\t\t\t\tif (result.status === ApiResponseModel.API_SUCCESS) {\n\t\t\t\t\tif (this.viewArchived) {\n\t\t\t\t\t\tthis.loadArchivedBatchList();\n\t\t\t\t\t\tthis.dataGridOperationsHelper.unSelectAllCheckboxes();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.reloadBatchList();\n\t\t\t\t\t\tthis.dataGridOperationsHelper.unSelectAllCheckboxes();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.handleError(result.errors ? result.errors[0] : null);\n\t\t\t\t}\n\t\t\t},\n\t\t\t(err) => this.handleError(err)\n\t\t);\n\t}\n\n\t/**\n\t * Handles API error results. Displays messages.\n\t * @param {string} error\n\t */\n\tprivate handleError(error: string): void {\n\t\tthis.notifierService.broadcast({\n\t\t\tname: AlertType.DANGER,\n\t\t\tmessage: error\n\t\t});\n\t}\n\n\t/**\n\t * On View Archived checkbox clicked, toggle load archived batch list\n\t */\n\tprivate onToggleViewArchived(): void {\n\t\tthis.dataGridOperationsHelper.unSelectAllCheckboxes();\n\t\tif (this.viewArchived) {\n\t\t\tthis.loadArchivedBatchList();\n\t\t} else {\n\t\t\tthis.reloadBatchList();\n\t\t}\n\t}\n\n\t/**\n\t * On Play action button clicked, start import batch.\n\t * @param batch\n\t */\n\tprivate onPlayButton(batch: ImportBatchModel): void {\n\t\tconst ids = [batch.id];\n\t\tthis.importBatchService.queueImportBatches(ids).subscribe( (response: ApiResponseModel) => {\n\t\t\t\tif (response.status === ApiResponseModel.API_SUCCESS && response.data.QUEUE === 1) {\n\t\t\t\t\tbatch.status.code = BatchStatus.QUEUED.toString();\n\t\t\t\t\tbatch.status.label = 'Queued';\n\t\t\t\t\tthis.addToQueuedBatchesLoop(batch);\n\t\t\t\t} else {\n\t\t\t\t\tthis.reloadBatchList();\n\t\t\t\t\tthis.handleError(response.errors ? response.errors[0] : null);\n\t\t\t\t}\n\t\t\t},\n\t\t\t(err) => this.handleError(err)\n\t\t);\n\t}\n\n\t/**\n\t * On Eject action button clicked, start import batch.\n\t * @param batch\n\t */\n\tprivate onEjectButton(batch: ImportBatchModel): void {\n\t\tconst ids = [batch.id];\n\t\tthis.importBatchService.ejectImportBatches(ids).subscribe( (result: ApiResponseModel) => {\n\t\t\t\tif (result.status === ApiResponseModel.API_SUCCESS) {\n\t\t\t\t\tbatch.status.code = BatchStatus.PENDING.toString();\n\t\t\t\t\tbatch.status.label = 'Pending';\n\t\t\t\t\tthis.removeBatchFromQueuedLoop(batch);\n\t\t\t\t} else {\n\t\t\t\t\tthis.handleError(result.errors ? result.errors[0] : null);\n\t\t\t\t}\n\t\t\t},\n\t\t\t(err) => this.handleError(err)\n\t\t);\n\t}\n\n\t/**\n\t * On Stop action button clicked, confirm then stop import batch.\n\t * @param item\n\t */\n\tprivate onStopButton(batch: ImportBatchModel): void {\n\t\tthis.confirmStopAction(batch);\n\t}\n\n\t/**\n\t * Confirmation dialog pops up when stop button is clicked.\n\t */\n\tprivate confirmStopAction(batch: ImportBatchModel): void {\n\t\tthis.promptService.open(\n\t\t\tthis.translatePipe.transform(PROMPT_DEFAULT_TITLE_KEY),\n\t\t\tthis.translatePipe.transform(this.STOP_BATCH_CONFIRMATION),\n\t\t\t'Confirm', 'Cancel').then(result => {\n\t\t\tif (result) {\n\t\t\t\tthis.stopBatch(batch);\n\t\t\t}\n\t\t}, /* on rejected do nothing */);\n\t}\n\n\t/**\n\t * Stop batch calling the endpoint.\n\t */\n\tprivate stopBatch(batch: ImportBatchModel): void {\n\t\tconst ids = [batch.id];\n\t\tthis.importBatchService.stopImportBatch(ids).subscribe( (result: ApiResponseModel) => {\n\t\t\tif (result.status === ApiResponseModel.API_SUCCESS) {\n\t\t\t\tthis.removeBatchFromRunningLoop(batch);\n\t\t\t\tthis.reloadImportBatch(batch);\n\t\t\t} else {\n\t\t\t\tthis.handleError(result.errors[0] ? result.errors[0] : 'Error on stop import batch endpoint.');\n\t\t\t}\n\t\t}, error => this.handleError(error));\n\t}\n\n\t/**\n\t * Determines if has DataTransferBatchProcess permission to run actions.\n\t * @returns {boolean}\n\t */\n\tprivate canRunActions(): boolean {\n\t\treturn this.permissionService.hasPermission(Permission.DataTransferBatchProcess);\n\t}\n\n\t/**\n\t * Determines if has DataTransferBatchDelete permission to bulk delete batches.\n\t * @returns {boolean}\n\t */\n\tprivate canBulkDelete(): boolean {\n\t\treturn this.permissionService.hasPermission(Permission.DataTransferBatchDelete);\n\t}\n\n\t/**\n\t * Determines if has DataTransferBatchProcess permission to bulk archive batches.\n\t * @returns {boolean}\n\t */\n\tprivate canBulkArchive(): boolean {\n\t\treturn this.permissionService.hasPermission(Permission.DataTransferBatchProcess);\n\t}\n\n\t/**\n\t * Add modifications to the params send to filter if needed.\n\t * @param {GridColumnModel} column\n\t */\n\tprivate preProcessFilter(column: GridColumnModel): void {\n\t\tif (column.property === 'status') {\n\t\t\tlet columnCopy = {...column};\n\t\t\tcolumnCopy.property = 'status.label';\n\t\t\tthis.dataGridOperationsHelper.onFilter(columnCopy);\n\t\t} else {\n\t\t\tthis.dataGridOperationsHelper.onFilter(column);\n\t\t}\n\t}\n\n\t/**\n\t * Initializes the loop for batches on RUNNING state.\n\t */\n\tprivate setRunningLoop(): void {\n\t\tthis.runningBatches = this.dataGridOperationsHelper.resultSet.filter( (item: ImportBatchModel) => {\n\t\t\treturn item.status.code === BatchStatus.RUNNING.toString();\n\t\t});\n\t\tthis.runningLoop();\n\t}\n\n\t/**\n\t * Running Loop, called recursively to check if there's any batch on RUNNING state and checking it's progress.\n\t * This implementation waits for the first API call to finish in order to apply the time interval and do the next\n\t * check. (instead of queuing the API calls asynchronously).\n\t */\n\tprivate runningLoop(): void {\n\t\t// console.log('Running batches: ', this.runningBatches.length);\n\t\tif (this.runningBatches.length === 0) {\n\t\t\tthis.batchRunningLoop = setTimeout(() => {\n\t\t\t\tthis.setRunningLoop();\n\t\t\t}, this.PROGRESS_CHECK_INTERVAL);\n\t\t} else {\n\t\t\tfor (let batch of this.runningBatches) {\n\t\t\t\tthis.importBatchService.getImportBatchProgress(batch.id).subscribe((response: ApiResponseModel) => {\n\t\t\t\t\tif (response.status === ApiResponseModel.API_SUCCESS) {\n\t\t\t\t\t\tbatch.currentProgress =  response.data.progress ? response.data.progress : 0;\n\t\t\t\t\t\tconst lastUpdated = (response.data.lastUpdated as Date);\n\t\t\t\t\t\tbatch.stalledCounter = batch.lastUpdated === lastUpdated ? batch.stalledCounter += 1 : 0 ;\n\t\t\t\t\t\t// If batch doesn't update after N times, then move to STALLED and remove it from the looper.\n\t\t\t\t\t\tif (batch.stalledCounter >= this.PROGRESS_MAX_TRIES) {\n\t\t\t\t\t\t\tbatch.status.code = BatchStatus.STALLED.toString();\n\t\t\t\t\t\t\tbatch.status.label = 'Stalled';\n\t\t\t\t\t\t\tthis.removeBatchFromRunningLoop(batch);\n\t\t\t\t\t\t} else if (batch.currentProgress >= 100) {\n\t\t\t\t\t\t\tbatch.status = response.data.status as EnumModel;\n\t\t\t\t\t\t\tbatch.currentProgress = 0;\n\t\t\t\t\t\t\tthis.removeBatchFromRunningLoop(batch);\n\t\t\t\t\t\t\tthis.reloadImportBatch(batch);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbatch.lastUpdated =  response.data.lastUpdated as Date;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.handleError(response.errors[0] ? response.errors[0] : 'error on get batch progress');\n\t\t\t\t\t}\n\t\t\t\t\t// keep the loop running ..\n\t\t\t\t\tthis.batchRunningLoop = setTimeout(() => {\n\t\t\t\t\t\tthis.runningLoop();\n\t\t\t\t\t}, this.PROGRESS_CHECK_INTERVAL);\n\t\t\t\t}, error => {\n\t\t\t\t\tclearTimeout(this.batchRunningLoop);\n\t\t\t\t\tthis.handleError(error);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Initializes the loop for batches on QUEUED state.\n\t */\n\tprivate setQueuedLoop(): void {\n\t\tthis.queuedBatches = this.dataGridOperationsHelper.resultSet.filter( (item: ImportBatchModel) => {\n\t\t\treturn item.status.code === BatchStatus.QUEUED.toString();\n\t\t});\n\t\tthis.queuedLoop([...this.queuedBatches]);\n\t}\n\n\t/**\n\t * Queued Loop, called recursively to check if there's any batch on QUEUED state and checking it's state.\n\t * Receives a copy of the original list of queued batches, since this queued state can be applied to several batches\n\t * at time, this avoids to run the function exponentially every time we add a batch to the list.\n\t * This implementation waits for the first API call to finish in order to apply the time interval and do the next\n\t * check. (instead of queuing the API calls asynchronously).\n\t * @param {Array<ImportBatchModel>} batchList\n\t */\n\tprivate queuedLoop(batchList: Array<ImportBatchModel>): void {\n\t\t// console.log('Queued batches: ', batchList.length);\n\t\tif (batchList.length === 0) {\n\t\t\tthis.batchQueuedLoop = setTimeout(() => {\n\t\t\t\tthis.setQueuedLoop();\n\t\t\t}, this.PROGRESS_CHECK_INTERVAL);\n\t\t} else {\n\t\t\tfor (let i = 0; i < batchList.length; i++) {\n\t\t\t\tlet batch: ImportBatchModel = batchList[i];\n\t\t\t\tthis.importBatchService.getImportBatch(batch.id).subscribe((response: ApiResponseModel) => {\n\t\t\t\t\tif (response.status === ApiResponseModel.API_SUCCESS && response.data.status.code !== BatchStatus.QUEUED) {\n\t\t\t\t\t\tbatch.status.code = (response.data as ImportBatchModel).status.code;\n\t\t\t\t\t\tbatch.status.label = (response.data as ImportBatchModel).status.label;\n\t\t\t\t\t\tthis.removeBatchFromQueuedLoop(batch);\n\t\t\t\t\t\tif (batch.status.code === BatchStatus.RUNNING.toString()) {\n\t\t\t\t\t\t\tthis.addToRunningBatchesLoop(batch);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// last batch to check .. launch the loop;\n\t\t\t\t\tif (i === batchList.length - 1) {\n\t\t\t\t\t\t// keep the loop running ..\n\t\t\t\t\t\tthis.batchQueuedLoop = setTimeout(() => {\n\t\t\t\t\t\t\tthis.setQueuedLoop();\n\t\t\t\t\t\t}, this.PROGRESS_CHECK_INTERVAL);\n\t\t\t\t\t}\n\t\t\t\t}, error => {\n\t\t\t\t\tclearTimeout(this.batchQueuedLoop);\n\t\t\t\t\tthis.handleError(error)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Removes a batch from the RUNNING state batch list.\n\t * @param {ImportBatchModel} batch\n\t */\n\tprivate removeBatchFromRunningLoop(batch: ImportBatchModel): void {\n\t\tconst filterIndex = this.runningBatches.findIndex((item: ImportBatchModel) => item.id === batch.id);\n\t\tthis.runningBatches.splice(filterIndex, 1);\n\t}\n\n\t/**\n\t * Removes a batch from the QUEUED state batch list.\n\t * @param {ImportBatchModel} batch\n\t */\n\tprivate removeBatchFromQueuedLoop(batch: ImportBatchModel): void {\n\t\tconst filterIndex = this.queuedBatches.findIndex((item: ImportBatchModel) => item.id === batch.id);\n\t\tthis.queuedBatches.splice(filterIndex, 1);\n\t}\n\n\t/**\n\t * Adds a batch to the RUNNING state batch list.\n\t * @param {ImportBatchModel} batch\n\t */\n\tprivate addToRunningBatchesLoop(batch: ImportBatchModel): void {\n\t\tconst filterIndex = this.runningBatches.findIndex((item: ImportBatchModel) => item.id === batch.id);\n\t\tif (filterIndex < 0) {\n\t\t\tthis.runningBatches.push(batch);\n\t\t}\n\t}\n\n\t/**\n\t * Adds a batch to the QUEUED state batch list.\n\t * @param {ImportBatchModel} batch\n\t */\n\tprivate addToQueuedBatchesLoop(batch: ImportBatchModel): void {\n\t\tconst filterIndex = this.queuedBatches.findIndex((item: ImportBatchModel) => item.id === batch.id);\n\t\tif (filterIndex < 0) {\n\t\t\tthis.queuedBatches.push(batch);\n\t\t}\n\t}\n\n\t/**\n\t * Clears both RUNNING and QUEUED lists.\n\t */\n\tprivate clearLoopsLists(): void {\n\t\tthis.runningBatches = [];\n\t\tthis.queuedBatches = [];\n\t}\n\n\t/**\n\t * On grid pagination change event.\n\t * @param {PageChangeEvent} $event\n\t */\n\tprotected onPageChange($event: PageChangeEvent): void {\n\t\tthis.importBatchPreferences[IMPORT_BATCH_PREFERENCES.LIST_SIZE] = $event.take.toString();\n\t\tthis.userPreferenceService.setPreference(PREFERENCES_LIST.IMPORT_BATCH_PREFERENCES, JSON.stringify(this.importBatchPreferences)).subscribe( result => {\n\t\t\t// nothing to do here ..\n\t\t});\n\t\tthis.dataGridOperationsHelper.pageChange($event)\n\t}\n\n\tngOnDestroy(): void {\n\t\tclearTimeout(this.batchRunningLoop);\n\t\tclearTimeout(this.batchQueuedLoop);\n\t}\n}\n","import {Component, ViewChild} from '@angular/core';\nimport {ImportBatchRecordModel} from '../../model/import-batch-record.model';\nimport {ImportBatchModel} from '../../model/import-batch.model';\nimport {UIExtraDialog} from '../../../../shared/services/ui-dialog.service';\nimport {ImportBatchRecordFieldsComponent} from './import-batch-record-fields.component';\nimport {UIPromptService} from '../../../../shared/directives/ui-prompt.directive';\nimport {TranslatePipe} from '../../../../shared/pipes/translate.pipe';\nimport {KEYSTROKE} from '../../../../shared/model/constants';\nimport {PROMPT_DEFAULT_MESSAGE_KEY, PROMPT_DEFAULT_TITLE_KEY} from '../../../../shared/model/constants';\nimport {DecoratorOptions} from '../../../../shared/model/ui-modal-decorator.model';\n\n@Component({\n\tselector: 'import-batch-record-dialog',\n\ttemplateUrl: '../tds/web-app/app-js/modules/importBatch/components/record/import-batch-record-dialog.component.html',\n\thost: {\n\t\t'(keydown)': 'keyDownHandler($event)'\n\t}\n})\nexport class ImportBatchRecordDialogComponent extends UIExtraDialog {\n\n\t@ViewChild('detailFieldsComponent') detailFieldsComponent: ImportBatchRecordFieldsComponent;\n\tprivate batchRecordUpdatedFlag = false;\n\tprotected modalOptions: DecoratorOptions;\n\tprotected isWindowMaximized;\n\n\tconstructor(\n\t\tprivate importBatch: ImportBatchModel,\n\t\tprivate batchRecord: ImportBatchRecordModel,\n\t\tprivate promptService: UIPromptService,\n\t\tprivate translatePipe: TranslatePipe) {\n\t\t\tsuper('#import-batch-record-dialog');\n\t\t\tthis.isWindowMaximized = false;\n\t\t\tthis.modalOptions = { isFullScreen: true, isResizable: true, isDraggable: true };\n\t}\n\n\t/**\n\t * On close dialog.\n\t */\n\tprivate onCancelCloseDialog(): void {\n\t\tif (this.detailFieldsComponent.areOverrideValuesDirty()) {\n\t\t\tthis.promptService.open(\n\t\t\t\tthis.translatePipe.transform(PROMPT_DEFAULT_TITLE_KEY),\n\t\t\t\tthis.translatePipe.transform(PROMPT_DEFAULT_MESSAGE_KEY),\n\t\t\t\t'Confirm', 'Cancel').then(result => {\n\t\t\t\tif (result) {\n\t\t\t\t\tthis.close(this.batchRecordUpdatedFlag ? 'reload' : null);\n\t\t\t\t}\n\t\t\t}, (reason: any) => console.log('confirm rejected', reason));\n\t\t} else {\n\t\t\tthis.close(this.batchRecordUpdatedFlag ? 'reload' : null);\n\t\t}\n\t}\n\n\t/**\n\t * Detect if the use has pressed the on Escape to close the dialog and popup if there are pending changes.\n\t * @param {KeyboardEvent} event\n\t */\n\tprivate keyDownHandler($event: KeyboardEvent): void {\n\t\tif ($event && $event.code === KEYSTROKE.ESCAPE) {\n\t\t\tthis.onCancelCloseDialog();\n\t\t}\n\t}\n\n\t/**\n\t * On Fields Values updated successfully.\n\t */\n\tprivate onUpdateSuccess(): void {\n\t\tthis.batchRecordUpdatedFlag = true;\n\t}\n\n\t/**\n\t * On Fields Values updated successfully.\n\t */\n\tprivate onBatchRecordUpdated($event): void {\n\t\tthis.batchRecord = $event.batchRecord;\n\t}\n\n\t/**\n\t * Maximizes windows to fullscreen.\n\t */\n\tprotected maximizeWindow() {\n\t\tthis.isWindowMaximized = true;\n\t}\n\n\t/**\n\t * Resets windows default size.\n\t */\n\tprotected restoreWindow() {\n\t\tthis.isWindowMaximized = false;\n\t}\n}","import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {ImportBatchModel} from '../../model/import-batch.model';\nimport {ImportBatchRecordModel} from '../../model/import-batch-record.model';\nimport {PreferenceService, PREFERENCES_LIST, IMPORT_BATCH_PREFERENCES} from '../../../../shared/services/preference.service';\nimport { DateUtils } from '../../../../shared/utils/date.utils';\n\n@Component({\n\tselector: 'import-batch-record-summary',\n\ttemplateUrl: '../tds/web-app/app-js/modules/importBatch/components/record/import-batch-record-summary.component.html'\n})\nexport class ImportBatchRecordSummaryComponent {\n\n\t@Input('importBatch') importBatch: ImportBatchModel;\n\t@Input('batchRecord') batchRecord: ImportBatchRecordModel;\n\n\tprotected importBatchPreferences = {};\n\tpublic importBatchPrefEnum = IMPORT_BATCH_PREFERENCES;\n\tpublic userTimeZone: string;\n\n\tconstructor(private userPreferenceService: PreferenceService) {\n\t\tthis.onLoad();\n\t}\n\n\t/**\n\t * On Page Load\n\t */\n\tprivate onLoad(): void {\n\t\t// Fetch the user preferences for their TimeZone\n\t\tthis.userTimeZone = this.userPreferenceService.getUserTimeZone();\n\t\tthis.userPreferenceService.getSinglePreference(PREFERENCES_LIST.IMPORT_BATCH_PREFERENCES).subscribe( res => {\n\t\t\tif (res) {\n\t\t\t\t\tthis.importBatchPreferences = JSON.parse(res);\n\t\t\t\t\tif (this.importBatchPreferences[IMPORT_BATCH_PREFERENCES.TWISTIE_COLLAPSED] == undefined) {\n\t\t\t\t\t\tthis.importBatchPreferences[IMPORT_BATCH_PREFERENCES.TWISTIE_COLLAPSED] = false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\tthis.importBatchPreferences[IMPORT_BATCH_PREFERENCES.TWISTIE_COLLAPSED] = false;\n\t\t\t}\n\t\t\t}, (error) => { console.error(error) });\n\t}\n\n\t/**\n\t * Returns true if batch record got errors.\n\t */\n\tprotected batchHasErrors(): boolean {\n\t\treturn this.batchRecord.errorCount > 0 || (this.batchRecord.errorList && this.batchRecord.errorList.length > 0)\n\t}\n\n\tprotected toggleSummary(): void {\n\t\tthis.importBatchPreferences[IMPORT_BATCH_PREFERENCES.TWISTIE_COLLAPSED] = !this.importBatchPreferences[IMPORT_BATCH_PREFERENCES.TWISTIE_COLLAPSED];\n\t\tthis.userPreferenceService.setPreference(PREFERENCES_LIST.IMPORT_BATCH_PREFERENCES, JSON.stringify(this.importBatchPreferences)).subscribe( r => { /**/});\n\t}\n}","// Angular\nimport {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\n// Resolves\nimport {ModuleResolveService} from '../../shared/resolves/module.resolve.service';\nimport {PreferencesResolveService} from '../../shared/resolves/preferences-resolve.service';\n// Services\nimport {AuthGuardService} from '../security/services/auth.guard.service';\n// Components\nimport {ImportBatchListComponent} from './components/list/import-batch-list.component';\nimport {ImportAssetsComponent} from './components/import-assets/import-assets.component';\n// Models\nimport {Permission} from '../../shared/model/permission.model';\n\nconst TOP_MENU_PARENT_SECTION = 'menu-parent-assets';\n\nexport class ImportBatchStates {\n\tpublic static readonly IMPORT_BATCH_LIST = {\n\t\turl: 'list'\n\t};\n\tpublic static readonly IMPORT_BATCH_VIEW = {\n\t\turl: 'list/:id'\n\t};\n\tpublic static readonly IMPORT_ASSETS = {\n\t\turl: 'assets'\n\t};\n}\n\nexport const ImportBatchRoute: Routes = [\n\t{path: '', pathMatch: 'full', redirectTo: ImportBatchStates.IMPORT_BATCH_LIST.url},\n\t{\n\t\tpath: ImportBatchStates.IMPORT_BATCH_LIST.url,\n\t\tdata: {\n\t\t\tpage: {\n\t\t\t\ttitle: 'IMPORT_BATCH.MANAGE_LIST',\n\t\t\t\tinstruction: '',\n\t\t\t\tmenu: ['ASSETS.ASSETS', 'IMPORT_BATCH.MANAGE_LIST'],\n\t\t\t\ttopMenu: { parent: TOP_MENU_PARENT_SECTION, child: 'menu-parent-assets-manage-dep-batches'}\n\t\t\t},\n\t\t\trequiresAuth: true,\n\t\t\trequiresPermission: Permission.DataTransferBatchView\n\t\t},\n\t\tcomponent: ImportBatchListComponent,\n\t\tcanActivate: [AuthGuardService, ModuleResolveService, PreferencesResolveService]\n\t},\n\t{\n\t\tpath: ImportBatchStates.IMPORT_ASSETS.url,\n\t\tdata: {\n\t\t\tpage: {\n\t\t\t\ttitle: 'IMPORT_ASSETS.MANUAL_IMPORT.IMPORT_ASSETS_ETL',\n\t\t\t\tinstruction: '',\n\t\t\t\tmenu: ['ASSETS.ASSETS', 'IMPORT_ASSETS.MANUAL_IMPORT.IMPORT_ASSETS_ETL'],\n\t\t\t\ttopMenu: { parent: TOP_MENU_PARENT_SECTION, child: 'menu-parent-assets-import-assets-etl'}\n\t\t\t},\n\t\t\trequiresAuth: true,\n\t\t\thasPendingChanges: false\n\t\t},\n\t\tcomponent: ImportAssetsComponent,\n\t\tcanActivate: [AuthGuardService, ModuleResolveService, PreferencesResolveService]\n\t},\n\t{\n\t\tpath: ImportBatchStates.IMPORT_BATCH_VIEW.url,\n\t\tdata: {\n\t\t\tpage: {\n\t\t\t\ttitle: 'IMPORT_BATCH.MANAGE_LIST',\n\t\t\t\tinstruction: '',\n\t\t\t\tmenu: ['ASSETS.ASSETS', 'IMPORT_BATCH.MANAGE_LIST'],\n\t\t\t\ttopMenu: { parent: TOP_MENU_PARENT_SECTION, child: 'menu-parent-assets-manage-dep-batches'}\n\t\t\t},\n\t\t\trequiresAuth: true,\n\t\t\trequiresPermission: Permission.DataTransferBatchView\n\t\t},\n\t\tcomponent: ImportBatchListComponent,\n\t\tcanActivate: [AuthGuardService, ModuleResolveService, PreferencesResolveService]\n\t}\n];\n\n@NgModule({\n\texports: [RouterModule],\n\timports: [RouterModule.forChild(ImportBatchRoute)]\n})\n\nexport class ImportBatchRouteModule {\n}","// Angular\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {HttpClientModule, HTTP_INTERCEPTORS} from '@angular/common/http';\n// Shared\nimport {SharedModule} from '../../shared/shared.module';\n// Kendo\nimport {GridModule} from '@progress/kendo-angular-grid';\nimport {DateInputsModule} from '@progress/kendo-angular-dateinputs';\nimport {ImportBatchService} from './service/import-batch.service';\nimport {DropDownsModule} from '@progress/kendo-angular-dropdowns';\nimport {UploadModule} from '@progress/kendo-angular-upload';\nimport {LayoutModule} from '@progress/kendo-angular-layout';\n// Route Module\nimport {ImportBatchRouteModule} from './import-batch-routing.states';\n// Resolves\nimport {ModuleResolveService} from '../../shared/resolves/module.resolve.service';\n// Services\nimport {ImportAssetsService} from './service/import-assets.service';\nimport {DataScriptService} from '../dataScript/service/data-script.service';\n// Components\nimport {ImportBatchRecordSummaryComponent} from './components/record/import-batch-record-summary.component';\nimport {ImportBatchRecordFieldsComponent} from './components/record/import-batch-record-fields.component';\nimport {ImportBatchListComponent} from './components/list/import-batch-list.component';\nimport {ImportBatchDetailDialogComponent} from './components/detail/import-batch-detail-dialog.component';\nimport {ImportBatchRecordDialogComponent} from './components/record/import-batch-record-dialog.component';\nimport {ImportAssetsComponent} from './components/import-assets/import-assets.component';\nimport {KendoFileUploadInterceptor} from '../../shared/providers/kendo-file-upload.interceptor';\n\n@NgModule({\n\timports: [\n\t\t// Angular\n\t\tCommonModule,\n\t\tSharedModule,\n\t\tFormsModule,\n\t\t// TODO: Only for Kendo Upload at this point\n\t\tHttpClientModule,\n\t\t// Kendo\n\t\tGridModule,\n\t\tDropDownsModule,\n\t\tDateInputsModule,\n\t\tUploadModule,\n\t\tLayoutModule,\n\t\t// Route\n\t\tImportBatchRouteModule\n\t],\n\tdeclarations: [\n\t\tImportBatchListComponent,\n\t\tImportBatchDetailDialogComponent,\n\t\tImportBatchRecordDialogComponent,\n\t\tImportBatchRecordSummaryComponent,\n\t\tImportBatchRecordFieldsComponent,\n\t\tImportAssetsComponent\n\t],\n\tproviders: [\n\t\tModuleResolveService,\n\t\tImportBatchService,\n\t\tImportAssetsService,\n\t\tDataScriptService,\n\t\t{\n\t\t\tprovide: HTTP_INTERCEPTORS,\n\t\t\tuseClass: KendoFileUploadInterceptor,\n\t\t\tmulti: true\n\t\t}\n\t],\n\texports: [\n\t\tImportBatchListComponent,\n\t\tImportAssetsComponent\n\t],\n\tentryComponents: [\n\t\tImportBatchDetailDialogComponent,\n\t\tImportBatchRecordDialogComponent\n\t],\n})\n\nexport class ImportBatchModule {\n}\n"],"sourceRoot":""}